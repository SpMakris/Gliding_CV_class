
CV_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e0  080040e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080040e0  080040e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e0  080040e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000070  08004160  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08004160  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001005c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027cb  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  000328c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  000339a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018507  00000000  00000000  00034948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cebe  00000000  00000000  0004ce4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008863a  00000000  00000000  00059d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2347  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  000e23c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004080 	.word	0x08004080

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004080 	.word	0x08004080

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_lmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46ce      	mov	lr, r9
 80003f8:	4647      	mov	r7, r8
 80003fa:	0415      	lsls	r5, r2, #16
 80003fc:	0c2d      	lsrs	r5, r5, #16
 80003fe:	002e      	movs	r6, r5
 8000400:	b580      	push	{r7, lr}
 8000402:	0407      	lsls	r7, r0, #16
 8000404:	0c14      	lsrs	r4, r2, #16
 8000406:	0c3f      	lsrs	r7, r7, #16
 8000408:	4699      	mov	r9, r3
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	437e      	muls	r6, r7
 800040e:	435d      	muls	r5, r3
 8000410:	4367      	muls	r7, r4
 8000412:	4363      	muls	r3, r4
 8000414:	197f      	adds	r7, r7, r5
 8000416:	0c34      	lsrs	r4, r6, #16
 8000418:	19e4      	adds	r4, r4, r7
 800041a:	469c      	mov	ip, r3
 800041c:	42a5      	cmp	r5, r4
 800041e:	d903      	bls.n	8000428 <__aeabi_lmul+0x34>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	025b      	lsls	r3, r3, #9
 8000424:	4698      	mov	r8, r3
 8000426:	44c4      	add	ip, r8
 8000428:	464b      	mov	r3, r9
 800042a:	4343      	muls	r3, r0
 800042c:	4351      	muls	r1, r2
 800042e:	0c25      	lsrs	r5, r4, #16
 8000430:	0436      	lsls	r6, r6, #16
 8000432:	4465      	add	r5, ip
 8000434:	0c36      	lsrs	r6, r6, #16
 8000436:	0424      	lsls	r4, r4, #16
 8000438:	19a4      	adds	r4, r4, r6
 800043a:	195b      	adds	r3, r3, r5
 800043c:	1859      	adds	r1, r3, r1
 800043e:	0020      	movs	r0, r4
 8000440:	bc0c      	pop	{r2, r3}
 8000442:	4690      	mov	r8, r2
 8000444:	4699      	mov	r9, r3
 8000446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000448 <_ZN2CVC1Ev>:
 *Calling update_target(note) will make the output glide towards that note.
 *Calling The variable "note" refers to one of the 128
 *midi notes.
 */
#include "CV.h"
CV::CV() {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <_ZN2CVC1Ev+0x4c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
	note_range = 128;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2280      	movs	r2, #128	; 0x80
 800045a:	809a      	strh	r2, [r3, #4]
	Semitone = 0xffff / (note_range - 1);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	889b      	ldrh	r3, [r3, #4]
 8000460:	3b01      	subs	r3, #1
 8000462:	0019      	movs	r1, r3
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <_ZN2CVC1Ev+0x50>)
 8000466:	f7ff fed9 	bl	800021c <__divsi3>
 800046a:	0003      	movs	r3, r0
 800046c:	b29a      	uxth	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	81da      	strh	r2, [r3, #14]
	CV_output_function = 0;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
	target_pitch = 0;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2200      	movs	r2, #0
 800047c:	80da      	strh	r2, [r3, #6]
	current_pitch = 0;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	811a      	strh	r2, [r3, #8]
	last_pitch = 0;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2200      	movs	r2, #0
 8000488:	821a      	strh	r2, [r3, #16]

}
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}
 8000494:	080040c0 	.word	0x080040c0
 8000498:	0000ffff 	.word	0x0000ffff

0800049c <_ZN2CV7CV_initEttPFvtE>:
void CV::CV_init(uint16_t tolerance, uint16_t glide_const,
		void (*fptr)(uint16_t value)) {
 800049c:	b5b0      	push	{r4, r5, r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	0008      	movs	r0, r1
 80004a6:	0011      	movs	r1, r2
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	240a      	movs	r4, #10
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	1c02      	adds	r2, r0, #0
 80004b0:	801a      	strh	r2, [r3, #0]
 80004b2:	2508      	movs	r5, #8
 80004b4:	197b      	adds	r3, r7, r5
 80004b6:	1c0a      	adds	r2, r1, #0
 80004b8:	801a      	strh	r2, [r3, #0]
	set_tolerance(tolerance);
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	881a      	ldrh	r2, [r3, #0]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 f853 	bl	800056e <_ZN2CV13set_toleranceEt>
	set_glide(glide_const);
 80004c8:	197b      	adds	r3, r7, r5
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 f865 	bl	80005a0 <_ZN2CV9set_glideEt>
	setCV_output_function(fptr);
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 f905 	bl	80006ec <_ZN2CV21setCV_output_functionEPFvtE>
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b004      	add	sp, #16
 80004e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080004ec <_ZN2CVD1Ev>:
		Semitone = 0xffff / (note_range - 1);

	}
}

CV::~CV() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <_ZN2CVD1Ev+0x18>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	0018      	movs	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}
 8000504:	080040c0 	.word	0x080040c0

08000508 <_ZN2CVD0Ev>:
CV::~CV() {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
}
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff ffea 	bl	80004ec <_ZN2CVD1Ev>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2118      	movs	r1, #24
 800051c:	0018      	movs	r0, r3
 800051e:	f003 fc73 	bl	8003e08 <_ZdlPvj>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}

0800052c <_ZN2CV15set_target_noteEh>:

void CV::set_target_note(uint8_t note) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	000a      	movs	r2, r1
 8000536:	1cfb      	adds	r3, r7, #3
 8000538:	701a      	strb	r2, [r3, #0]
	if (note > (note_range-1)) {
 800053a:	1cfb      	adds	r3, r7, #3
 800053c:	781a      	ldrb	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	889b      	ldrh	r3, [r3, #4]
 8000542:	3b01      	subs	r3, #1
 8000544:	429a      	cmp	r2, r3
 8000546:	dd05      	ble.n	8000554 <_ZN2CV15set_target_noteEh+0x28>
		note = note_range-1;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	889b      	ldrh	r3, [r3, #4]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	3a01      	subs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
	}

	target_pitch = note * Semitone;
 8000554:	1cfb      	adds	r3, r7, #3
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b29b      	uxth	r3, r3
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	89d2      	ldrh	r2, [r2, #14]
 800055e:	4353      	muls	r3, r2
 8000560:	b29a      	uxth	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	80da      	strh	r2, [r3, #6]

}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}

0800056e <_ZN2CV13set_toleranceEt>:
	return glide_const;
}
uint16_t CV::get_tolerance() {
	return tolerance;
}
void CV::set_tolerance(uint16_t tolerance) {
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	000a      	movs	r2, r1
 8000578:	1cbb      	adds	r3, r7, #2
 800057a:	801a      	strh	r2, [r3, #0]
	this->tolerance = tolerance;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	1cba      	adds	r2, r7, #2
 8000580:	8812      	ldrh	r2, [r2, #0]
 8000582:	819a      	strh	r2, [r3, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b002      	add	sp, #8
 800058a:	bd80      	pop	{r7, pc}

0800058c <_ZN2CV14get_last_pitchEv>:
uint16_t CV::get_last_pitch() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	return last_pitch;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	8a1b      	ldrh	r3, [r3, #16]
}
 8000598:	0018      	movs	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	b002      	add	sp, #8
 800059e:	bd80      	pop	{r7, pc}

080005a0 <_ZN2CV9set_glideEt>:

void CV::set_target_raw(uint16_t target) {
	target_pitch = target;
}

void CV::set_glide(uint16_t glide_const) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	000a      	movs	r2, r1
 80005aa:	1cbb      	adds	r3, r7, #2
 80005ac:	801a      	strh	r2, [r3, #0]
	this->glide_const = glide_const;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	1cba      	adds	r2, r7, #2
 80005b2:	8812      	ldrh	r2, [r2, #0]
 80005b4:	815a      	strh	r2, [r3, #10]
	if (this->glide_const == 0) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	895b      	ldrh	r3, [r3, #10]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d102      	bne.n	80005c4 <_ZN2CV9set_glideEt+0x24>
		this->glide_const = 1;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2201      	movs	r2, #1
 80005c2:	815a      	strh	r2, [r3, #10]
	}
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bd80      	pop	{r7, pc}

080005cc <_ZN2CV9CV_updateEv>:

//to be called at regular intervals.
uint16_t CV::CV_update() {
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	uint16_t specific_glide = glide_const;
 80005d4:	230e      	movs	r3, #14
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	8952      	ldrh	r2, [r2, #10]
 80005dc:	801a      	strh	r2, [r3, #0]
	uint16_t pitch_distance;
	last_pitch = current_pitch;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	891a      	ldrh	r2, [r3, #8]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	821a      	strh	r2, [r3, #16]
	if (target_pitch > current_pitch) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	88da      	ldrh	r2, [r3, #6]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	891b      	ldrh	r3, [r3, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d933      	bls.n	800065a <_ZN2CV9CV_updateEv+0x8e>
		pitch_distance = target_pitch - current_pitch;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	88da      	ldrh	r2, [r3, #6]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	891b      	ldrh	r3, [r3, #8]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	210c      	movs	r1, #12
 8000600:	187b      	adds	r3, r7, r1
 8000602:	801a      	strh	r2, [r3, #0]
		if (pitch_distance <= tolerance) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	899a      	ldrh	r2, [r3, #12]
 8000608:	187b      	adds	r3, r7, r1
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	429a      	cmp	r2, r3
 800060e:	d304      	bcc.n	800061a <_ZN2CV9CV_updateEv+0x4e>
			current_pitch = target_pitch;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	88da      	ldrh	r2, [r3, #6]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	811a      	strh	r2, [r3, #8]
 8000618:	e058      	b.n	80006cc <_ZN2CV9CV_updateEv+0x100>
		} else {
			if (glide_const > (pitch_distance)) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	895a      	ldrh	r2, [r3, #10]
 800061e:	230c      	movs	r3, #12
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	429a      	cmp	r2, r3
 8000626:	d905      	bls.n	8000634 <_ZN2CV9CV_updateEv+0x68>
				specific_glide = pitch_distance;
 8000628:	230e      	movs	r3, #14
 800062a:	18fb      	adds	r3, r7, r3
 800062c:	220c      	movs	r2, #12
 800062e:	18ba      	adds	r2, r7, r2
 8000630:	8812      	ldrh	r2, [r2, #0]
 8000632:	801a      	strh	r2, [r3, #0]
			}
			current_pitch = current_pitch + pitch_distance / specific_glide;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	891c      	ldrh	r4, [r3, #8]
 8000638:	230c      	movs	r3, #12
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	881a      	ldrh	r2, [r3, #0]
 800063e:	230e      	movs	r3, #14
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	0019      	movs	r1, r3
 8000646:	0010      	movs	r0, r2
 8000648:	f7ff fd5e 	bl	8000108 <__udivsi3>
 800064c:	0003      	movs	r3, r0
 800064e:	b29b      	uxth	r3, r3
 8000650:	18e3      	adds	r3, r4, r3
 8000652:	b29a      	uxth	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	811a      	strh	r2, [r3, #8]
 8000658:	e038      	b.n	80006cc <_ZN2CV9CV_updateEv+0x100>
		}
	}

	else if (current_pitch > target_pitch) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	891a      	ldrh	r2, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	88db      	ldrh	r3, [r3, #6]
 8000662:	429a      	cmp	r2, r3
 8000664:	d932      	bls.n	80006cc <_ZN2CV9CV_updateEv+0x100>
		pitch_distance = current_pitch - target_pitch;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	891a      	ldrh	r2, [r3, #8]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	88db      	ldrh	r3, [r3, #6]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b29a      	uxth	r2, r3
 8000672:	210c      	movs	r1, #12
 8000674:	187b      	adds	r3, r7, r1
 8000676:	801a      	strh	r2, [r3, #0]
		if (pitch_distance <= tolerance) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	899a      	ldrh	r2, [r3, #12]
 800067c:	187b      	adds	r3, r7, r1
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d304      	bcc.n	800068e <_ZN2CV9CV_updateEv+0xc2>
			current_pitch = target_pitch;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	88da      	ldrh	r2, [r3, #6]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	811a      	strh	r2, [r3, #8]
 800068c:	e01e      	b.n	80006cc <_ZN2CV9CV_updateEv+0x100>
		} else {
			if (glide_const > pitch_distance) {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	895a      	ldrh	r2, [r3, #10]
 8000692:	230c      	movs	r3, #12
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d905      	bls.n	80006a8 <_ZN2CV9CV_updateEv+0xdc>
				specific_glide = pitch_distance;
 800069c:	230e      	movs	r3, #14
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	220c      	movs	r2, #12
 80006a2:	18ba      	adds	r2, r7, r2
 80006a4:	8812      	ldrh	r2, [r2, #0]
 80006a6:	801a      	strh	r2, [r3, #0]
			}
			current_pitch = current_pitch - pitch_distance / specific_glide;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	891c      	ldrh	r4, [r3, #8]
 80006ac:	230c      	movs	r3, #12
 80006ae:	18fb      	adds	r3, r7, r3
 80006b0:	881a      	ldrh	r2, [r3, #0]
 80006b2:	230e      	movs	r3, #14
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	0019      	movs	r1, r3
 80006ba:	0010      	movs	r0, r2
 80006bc:	f7ff fd24 	bl	8000108 <__udivsi3>
 80006c0:	0003      	movs	r3, r0
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	1ae3      	subs	r3, r4, r3
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	811a      	strh	r2, [r3, #8]
		}
	}

	if (CV_output_function != 0) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d005      	beq.n	80006e0 <_ZN2CV9CV_updateEv+0x114>
		(*CV_output_function)(current_pitch);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	8912      	ldrh	r2, [r2, #8]
 80006dc:	0010      	movs	r0, r2
 80006de:	4798      	blx	r3
	}
	return current_pitch;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	891b      	ldrh	r3, [r3, #8]
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b005      	add	sp, #20
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <_ZN2CV21setCV_output_functionEPFvtE>:

void CV::setCV_output_function(void (*fptr)(uint16_t value)) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
	CV_output_function = fptr;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	615a      	str	r2, [r3, #20]
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b002      	add	sp, #8
 8000702:	bd80      	pop	{r7, pc}

08000704 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000708:	f000 fdb6 	bl	8001278 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800070c:	f000 f824 	bl	8000758 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000710:	f000 fa14 	bl	8000b3c <_ZL12MX_GPIO_Initv>
	MX_TSC_Init();
 8000714:	f000 f96a 	bl	80009ec <_ZL11MX_TSC_Initv>
	MX_USB_PCD_Init();
 8000718:	f000 f9e6 	bl	8000ae8 <_ZL15MX_USB_PCD_Initv>
	MX_DAC_Init();
 800071c:	f000 f88e 	bl	800083c <_ZL11MX_DAC_Initv>
	MX_TIM2_Init();
 8000720:	f000 f8d0 	bl	80008c4 <_ZL12MX_TIM2_Initv>
	MX_USART3_UART_Init();
 8000724:	f000 f9aa 	bl	8000a7c <_ZL19MX_USART3_UART_Initv>
	/* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <main+0x44>)
 800072a:	2100      	movs	r1, #0
 800072c:	0018      	movs	r0, r3
 800072e:	f000 ff6b 	bl	8001608 <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <main+0x48>)
 8000734:	0018      	movs	r0, r3
 8000736:	f002 f89b 	bl	8002870 <HAL_TIM_Base_Start_IT>
	pitch.CV_init(10, 100, output_CV);
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <main+0x4c>)
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <main+0x50>)
 800073e:	2264      	movs	r2, #100	; 0x64
 8000740:	210a      	movs	r1, #10
 8000742:	f7ff feab 	bl	800049c <_ZN2CV7CV_initEttPFvtE>
	static uint8_t note = 0;
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000746:	e7fe      	b.n	8000746 <main+0x42>
 8000748:	20000090 	.word	0x20000090
 800074c:	200000a4 	.word	0x200000a4
 8000750:	08000c61 	.word	0x08000c61
 8000754:	2000041c 	.word	0x2000041c

08000758 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b099      	sub	sp, #100	; 0x64
 800075c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800075e:	242c      	movs	r4, #44	; 0x2c
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	2334      	movs	r3, #52	; 0x34
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f003 fb93 	bl	8003e94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800076e:	231c      	movs	r3, #28
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	0018      	movs	r0, r3
 8000774:	2310      	movs	r3, #16
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f003 fb8b 	bl	8003e94 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800077e:	003b      	movs	r3, r7
 8000780:	0018      	movs	r0, r3
 8000782:	231c      	movs	r3, #28
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f003 fb84 	bl	8003e94 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800078c:	0021      	movs	r1, r4
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2222      	movs	r2, #34	; 0x22
 8000792:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2201      	movs	r2, #1
 8000798:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2201      	movs	r2, #1
 800079e:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2210      	movs	r2, #16
 80007a4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2202      	movs	r2, #2
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	0212      	lsls	r2, r2, #8
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	0352      	lsls	r2, r2, #13
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 fa29 	bl	8001c1c <HAL_RCC_OscConfig>
 80007ca:	0003      	movs	r3, r0
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	4193      	sbcs	r3, r2
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <_Z18SystemClock_Configv+0x82>
		Error_Handler();
 80007d6:	f000 fa77 	bl	8000cc8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007da:	211c      	movs	r1, #28
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2207      	movs	r2, #7
 80007e0:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2202      	movs	r2, #2
 80007e6:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2101      	movs	r1, #1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 fd95 	bl	8002328 <HAL_RCC_ClockConfig>
 80007fe:	0003      	movs	r3, r0
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	4193      	sbcs	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <_Z18SystemClock_Configv+0xb6>
		Error_Handler();
 800080a:	f000 fa5d 	bl	8000cc8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800080e:	003b      	movs	r3, r7
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	0292      	lsls	r2, r2, #10
 8000814:	601a      	str	r2, [r3, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000816:	003b      	movs	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800081c:	003b      	movs	r3, r7
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fefa 	bl	8002618 <HAL_RCCEx_PeriphCLKConfig>
 8000824:	0003      	movs	r3, r0
 8000826:	1e5a      	subs	r2, r3, #1
 8000828:	4193      	sbcs	r3, r2
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <_Z18SystemClock_Configv+0xdc>
		Error_Handler();
 8000830:	f000 fa4a 	bl	8000cc8 <Error_Handler>
	}
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b019      	add	sp, #100	; 0x64
 800083a:	bd90      	pop	{r4, r7, pc}

0800083c <_ZL11MX_DAC_Initv>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000842:	003b      	movs	r3, r7
 8000844:	0018      	movs	r0, r3
 8000846:	2308      	movs	r3, #8
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f003 fb22 	bl	8003e94 <memset>
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <_ZL11MX_DAC_Initv+0x80>)
 8000852:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <_ZL11MX_DAC_Initv+0x84>)
 8000854:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <_ZL11MX_DAC_Initv+0x80>)
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fe4f 	bl	80014fc <HAL_DAC_Init>
 800085e:	0003      	movs	r3, r0
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	4193      	sbcs	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <_ZL11MX_DAC_Initv+0x32>
		Error_Handler();
 800086a:	f000 fa2d 	bl	8000cc8 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800086e:	003b      	movs	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800087a:	0039      	movs	r1, r7
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <_ZL11MX_DAC_Initv+0x80>)
 800087e:	2200      	movs	r2, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f000 fe81 	bl	8001588 <HAL_DAC_ConfigChannel>
 8000886:	0003      	movs	r3, r0
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	4193      	sbcs	r3, r2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <_ZL11MX_DAC_Initv+0x5a>
		Error_Handler();
 8000892:	f000 fa19 	bl	8000cc8 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8000896:	0039      	movs	r1, r7
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_ZL11MX_DAC_Initv+0x80>)
 800089a:	2210      	movs	r2, #16
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fe73 	bl	8001588 <HAL_DAC_ConfigChannel>
 80008a2:	0003      	movs	r3, r0
 80008a4:	1e5a      	subs	r2, r3, #1
 80008a6:	4193      	sbcs	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <_ZL11MX_DAC_Initv+0x76>
		Error_Handler();
 80008ae:	f000 fa0b 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000090 	.word	0x20000090
 80008c0:	40007400 	.word	0x40007400

080008c4 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008ca:	2328      	movs	r3, #40	; 0x28
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	0018      	movs	r0, r3
 80008d0:	2310      	movs	r3, #16
 80008d2:	001a      	movs	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f003 fadd 	bl	8003e94 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008da:	2320      	movs	r3, #32
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	0018      	movs	r0, r3
 80008e0:	2308      	movs	r3, #8
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f003 fad5 	bl	8003e94 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	0018      	movs	r0, r3
 80008ee:	231c      	movs	r3, #28
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f003 face 	bl	8003e94 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008f8:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	05d2      	lsls	r2, r2, #23
 80008fe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 6553;
 8000900:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 8000902:	4a39      	ldr	r2, [pc, #228]	; (80009e8 <_ZL12MX_TIM2_Initv+0x124>)
 8000904:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 8000908:	2210      	movs	r2, #16
 800090a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3;
 800090c:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 800090e:	2203      	movs	r2, #3
 8000910:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 8000920:	0018      	movs	r0, r3
 8000922:	f001 ff79 	bl	8002818 <HAL_TIM_Base_Init>
 8000926:	0003      	movs	r3, r0
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	4193      	sbcs	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <_ZL12MX_TIM2_Initv+0x72>
		Error_Handler();
 8000932:	f000 f9c9 	bl	8000cc8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000936:	2128      	movs	r1, #40	; 0x28
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	0152      	lsls	r2, r2, #5
 800093e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000940:	187a      	adds	r2, r7, r1
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f002 f94c 	bl	8002be4 <HAL_TIM_ConfigClockSource>
 800094c:	0003      	movs	r3, r0
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	4193      	sbcs	r3, r2
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <_ZL12MX_TIM2_Initv+0x98>
		Error_Handler();
 8000958:	f000 f9b6 	bl	8000cc8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 800095e:	0018      	movs	r0, r3
 8000960:	f001 ffa8 	bl	80028b4 <HAL_TIM_OC_Init>
 8000964:	0003      	movs	r3, r0
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	4193      	sbcs	r3, r2
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <_ZL12MX_TIM2_Initv+0xb0>
		Error_Handler();
 8000970:	f000 f9aa 	bl	8000cc8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000974:	2120      	movs	r1, #32
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000982:	187a      	adds	r2, r7, r1
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f002 fd27 	bl	80033dc <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	0003      	movs	r3, r0
			!= HAL_OK) {
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	4193      	sbcs	r3, r2
 8000994:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <_ZL12MX_TIM2_Initv+0xda>
		Error_Handler();
 800099a:	f000 f995 	bl	8000cc8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80009b6:	1d39      	adds	r1, r7, #4
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	0018      	movs	r0, r3
 80009be:	f002 f8c3 	bl	8002b48 <HAL_TIM_OC_ConfigChannel>
 80009c2:	0003      	movs	r3, r0
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	4193      	sbcs	r3, r2
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <_ZL12MX_TIM2_Initv+0x10e>
		Error_Handler();
 80009ce:	f000 f97b 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <_ZL12MX_TIM2_Initv+0x120>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fa47 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b00e      	add	sp, #56	; 0x38
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	200000a4 	.word	0x200000a4
 80009e8:	00001999 	.word	0x00001999

080009ec <_ZL11MX_TSC_Initv>:
/**
 * @brief TSC Initialization Function
 * @param None
 * @retval None
 */
static void MX_TSC_Init(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TSC_Init 1 */

	/* USER CODE END TSC_Init 1 */
	/** Configure the TSC peripheral
	 */
	htsc.Instance = TSC;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 80009f2:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <_ZL11MX_TSC_Initv+0x8c>)
 80009f4:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	0552      	lsls	r2, r2, #21
 80009fc:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	0452      	lsls	r2, r2, #17
 8000a04:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	0192      	lsls	r2, r2, #6
 8000a1e:	619a      	str	r2, [r3, #24]
	htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a22:	22a0      	movs	r2, #160	; 0xa0
 8000a24:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a3a:	222c      	movs	r2, #44	; 0x2c
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	5499      	strb	r1, [r3, r2]
	htsc.Init.ChannelIOs = TSC_GROUP1_IO3 | TSC_GROUP2_IO3 | TSC_GROUP3_IO2;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a42:	2291      	movs	r2, #145	; 0x91
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
	htsc.Init.ShieldIOs = 0;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
	htsc.Init.SamplingIOs = TSC_GROUP1_IO4 | TSC_GROUP2_IO4 | TSC_GROUP3_IO3;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a50:	2291      	movs	r2, #145	; 0x91
 8000a52:	00d2      	lsls	r2, r2, #3
 8000a54:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_TSC_Init(&htsc) != HAL_OK) {
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <_ZL11MX_TSC_Initv+0x88>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fd2d 	bl	80034b8 <HAL_TSC_Init>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	4193      	sbcs	r3, r2
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <_ZL11MX_TSC_Initv+0x82>
		Error_Handler();
 8000a6a:	f000 f92d 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN TSC_Init 2 */

	/* USER CODE END TSC_Init 2 */

}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000e4 	.word	0x200000e4
 8000a78:	40024000 	.word	0x40024000

08000a7c <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000a84:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 31250;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000a8a:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_RX;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_ZL19MX_USART3_UART_Initv+0x60>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f002 fda0 	bl	8003604 <HAL_UART_Init>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	1e5a      	subs	r2, r3, #1
 8000ac8:	4193      	sbcs	r3, r2
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <_ZL19MX_USART3_UART_Initv+0x58>
		Error_Handler();
 8000ad0:	f000 f8fa 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000128 	.word	0x20000128
 8000ae0:	40004800 	.word	0x40004800
 8000ae4:	00007a12 	.word	0x00007a12

08000ae8 <_ZL15MX_USB_PCD_Initv>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_ZL15MX_USB_PCD_Initv+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000af4:	2208      	movs	r2, #8
 8000af6:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 ff71 	bl	8001a00 <HAL_PCD_Init>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	1e5a      	subs	r2, r3, #1
 8000b22:	4193      	sbcs	r3, r2
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <_ZL15MX_USB_PCD_Initv+0x46>
		Error_Handler();
 8000b2a:	f000 f8cd 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001a8 	.word	0x200001a8
 8000b38:	40005c00 	.word	0x40005c00

08000b3c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b42:	240c      	movs	r4, #12
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	0018      	movs	r0, r3
 8000b48:	2314      	movs	r3, #20
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f003 f9a1 	bl	8003e94 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	0309      	lsls	r1, r1, #12
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	031b      	lsls	r3, r3, #12
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0289      	lsls	r1, r1, #10
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	029b      	lsls	r3, r3, #10
 8000b84:	4013      	ands	r3, r2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b8c:	695a      	ldr	r2, [r3, #20]
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	02c9      	lsls	r1, r1, #11
 8000b94:	430a      	orrs	r2, r1
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <_ZL12MX_GPIO_Initv+0xec>)
 8000b9a:	695a      	ldr	r2, [r3, #20]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	02db      	lsls	r3, r3, #11
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8000ba6:	4921      	ldr	r1, [pc, #132]	; (8000c2c <_ZL12MX_GPIO_Initv+0xf0>)
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <_ZL12MX_GPIO_Initv+0xf4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 feef 	bl	8001990 <HAL_GPIO_WritePin>
	NCS_MEMS_SPI_Pin | EXT_RESET_Pin | LD3_Pin | LD6_Pin | LD4_Pin | LD5_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
	 LD4_Pin LD5_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | EXT_RESET_Pin | LD3_Pin | LD6_Pin
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <_ZL12MX_GPIO_Initv+0xf0>)
 8000bb8:	601a      	str	r2, [r3, #0]
			| LD4_Pin | LD5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	000c      	movs	r4, r1
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <_ZL12MX_GPIO_Initv+0xf4>)
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	0010      	movs	r0, r2
 8000bd6:	f000 fd63 	bl	80016a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT1_Pin | MEMS_INT2_Pin;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2206      	movs	r2, #6
 8000be0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000be6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	000c      	movs	r4, r1
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <_ZL12MX_GPIO_Initv+0xf4>)
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0010      	movs	r0, r2
 8000bf8:	f000 fd52 	bl	80016a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bfc:	0021      	movs	r1, r4
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <_ZL12MX_GPIO_Initv+0xf8>)
 8000c08:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c10:	187a      	adds	r2, r7, r1
 8000c12:	2390      	movs	r3, #144	; 0x90
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 fd41 	bl	80016a0 <HAL_GPIO_Init>

}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b009      	add	sp, #36	; 0x24
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	000003e1 	.word	0x000003e1
 8000c30:	48000800 	.word	0x48000800
 8000c34:	10120000 	.word	0x10120000

08000c38 <set_note>:

/* USER CODE BEGIN 4 */
void set_note(uint8_t note) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	0002      	movs	r2, r0
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	701a      	strb	r2, [r3, #0]
	pitch.set_target_note(note);
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <set_note+0x24>)
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fc6d 	bl	800052c <_ZN2CV15set_target_noteEh>
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	2000041c 	.word	0x2000041c

08000c60 <output_CV>:
void output_CV(uint16_t value) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	801a      	strh	r2, [r3, #0]
	if (value != pitch.get_last_pitch()) {
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <output_CV+0x48>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fc8c 	bl	800058c <_ZN2CV14get_last_pitchEv>
 8000c74:	0003      	movs	r3, r0
 8000c76:	001a      	movs	r2, r3
 8000c78:	1dbb      	adds	r3, r7, #6
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	4193      	sbcs	r3, r2
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00b      	beq.n	8000ca0 <output_CV+0x40>
		value=value>>4;
 8000c88:	1dbb      	adds	r3, r7, #6
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	111a      	asrs	r2, r3, #4
 8000c8e:	1dbb      	adds	r3, r7, #6
 8000c90:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t) value);
 8000c92:	1dbb      	adds	r3, r7, #6
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <output_CV+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f000 fc51 	bl	8001542 <HAL_DAC_SetValue>
	}
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000041c 	.word	0x2000041c
 8000cac:	20000090 	.word	0x20000090

08000cb0 <run_update>:
void run_update() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	pitch.CV_update();
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <run_update+0x14>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fc88 	bl	80005cc <_ZN2CV9CV_updateEv>
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	2000041c 	.word	0x2000041c

08000cc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <_Z41__static_initialization_and_destruction_0ii>:
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d107      	bne.n	8000cf4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d103      	bne.n	8000cf4 <_Z41__static_initialization_and_destruction_0ii+0x20>
CV pitch;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fbaa 	bl	8000448 <_ZN2CVC1Ev>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d107      	bne.n	8000d0a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d103      	bne.n	8000d0a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff fbf1 	bl	80004ec <_ZN2CVD1Ev>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	0000ffff 	.word	0x0000ffff
 8000d18:	2000041c 	.word	0x2000041c

08000d1c <_GLOBAL__sub_I_i>:
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <_GLOBAL__sub_I_i+0x14>)
 8000d22:	0019      	movs	r1, r3
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff ffd5 	bl	8000cd4 <_Z41__static_initialization_and_destruction_0ii>
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	0000ffff 	.word	0x0000ffff

08000d34 <_GLOBAL__sub_D_i>:
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <_GLOBAL__sub_D_i+0x14>)
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ffc9 	bl	8000cd4 <_Z41__static_initialization_and_destruction_0ii>
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	0000ffff 	.word	0x0000ffff

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x44>)
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_MspInit+0x44>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	619a      	str	r2, [r3, #24]
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x44>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	69da      	ldr	r2, [r3, #28]
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_MspInit+0x44>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0549      	lsls	r1, r1, #21
 8000d74:	430a      	orrs	r2, r1
 8000d76:	61da      	str	r2, [r3, #28]
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_MspInit+0x44>)
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	055b      	lsls	r3, r3, #21
 8000d80:	4013      	ands	r3, r2
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	2314      	movs	r3, #20
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	0018      	movs	r0, r3
 8000da2:	2314      	movs	r3, #20
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f003 f874 	bl	8003e94 <memset>
  if(hdac->Instance==DAC)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_DAC_MspInit+0x84>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12c      	bne.n	8000e10 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000db8:	69da      	ldr	r2, [r3, #28]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0589      	lsls	r1, r1, #22
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	61da      	str	r2, [r3, #28]
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000dc6:	69da      	ldr	r2, [r3, #28]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	059b      	lsls	r3, r3, #22
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000dd4:	695a      	ldr	r2, [r3, #20]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	0289      	lsls	r1, r1, #10
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	029b      	lsls	r3, r3, #10
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dee:	2114      	movs	r1, #20
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2230      	movs	r2, #48	; 0x30
 8000df4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	187a      	adds	r2, r7, r1
 8000e04:	2390      	movs	r3, #144	; 0x90
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	0011      	movs	r1, r2
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 fc48 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b00a      	add	sp, #40	; 0x28
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40007400 	.word	0x40007400
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d113      	bne.n	8000e5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_TIM_Base_MspInit+0x44>)
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_TIM_Base_MspInit+0x44>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	61da      	str	r2, [r3, #28]
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_TIM_Base_MspInit+0x44>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	2201      	movs	r2, #1
 8000e46:	4013      	ands	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	200f      	movs	r0, #15
 8000e52:	f000 fb21 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f000 fb33 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b004      	add	sp, #16
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	230c      	movs	r3, #12
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	0018      	movs	r0, r3
 8000e76:	2314      	movs	r3, #20
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f003 f80a 	bl	8003e94 <memset>
  if(htim->Instance==TIM2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d125      	bne.n	8000ed8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_TIM_MspPostInit+0x78>)
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_TIM_MspPostInit+0x78>)
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	0289      	lsls	r1, r1, #10
 8000e96:	430a      	orrs	r2, r1
 8000e98:	615a      	str	r2, [r3, #20]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_TIM_MspPostInit+0x78>)
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	029b      	lsls	r3, r3, #10
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ea8:	210c      	movs	r1, #12
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0212      	lsls	r2, r2, #8
 8000eb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	187a      	adds	r2, r7, r1
 8000ecc:	2390      	movs	r3, #144	; 0x90
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 fbe4 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b008      	add	sp, #32
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b08b      	sub	sp, #44	; 0x2c
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	2314      	movs	r3, #20
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	2314      	movs	r3, #20
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f002 ffcc 	bl	8003e94 <memset>
  if(htsc->Instance==TSC)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a45      	ldr	r2, [pc, #276]	; (8001018 <HAL_TSC_MspInit+0x134>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d000      	beq.n	8000f08 <HAL_TSC_MspInit+0x24>
 8000f06:	e083      	b.n	8001010 <HAL_TSC_MspInit+0x12c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000f08:	4b44      	ldr	r3, [pc, #272]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0449      	lsls	r1, r1, #17
 8000f12:	430a      	orrs	r2, r1
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	4b41      	ldr	r3, [pc, #260]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	045b      	lsls	r3, r3, #17
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b3d      	ldr	r3, [pc, #244]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	4b3c      	ldr	r3, [pc, #240]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	0289      	lsls	r1, r1, #10
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	4b3a      	ldr	r3, [pc, #232]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	02c9      	lsls	r1, r1, #11
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <HAL_TSC_MspInit+0x138>)
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	02db      	lsls	r3, r3, #11
 8000f56:	4013      	ands	r3, r2
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000f5c:	2414      	movs	r4, #20
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	2244      	movs	r2, #68	; 0x44
 8000f62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	2202      	movs	r2, #2
 8000f68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2203      	movs	r2, #3
 8000f7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	193a      	adds	r2, r7, r4
 8000f7e:	2390      	movs	r3, #144	; 0x90
 8000f80:	05db      	lsls	r3, r3, #23
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 fb8b 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	2288      	movs	r2, #136	; 0x88
 8000f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2212      	movs	r2, #18
 8000f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	193a      	adds	r2, r7, r4
 8000faa:	2390      	movs	r3, #144	; 0x90
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fb75 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	000c      	movs	r4, r1
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_TSC_MspInit+0x13c>)
 8000fdc:	0019      	movs	r1, r3
 8000fde:	0010      	movs	r0, r2
 8000fe0:	f000 fb5e 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fe4:	0021      	movs	r1, r4
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2202      	movs	r2, #2
 8000fea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2212      	movs	r2, #18
 8000ff0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2203      	movs	r2, #3
 8001002:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	187b      	adds	r3, r7, r1
 8001006:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_TSC_MspInit+0x13c>)
 8001008:	0019      	movs	r1, r3
 800100a:	0010      	movs	r0, r2
 800100c:	f000 fb48 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b00b      	add	sp, #44	; 0x2c
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	40024000 	.word	0x40024000
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	2314      	movs	r3, #20
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	0018      	movs	r0, r3
 8001032:	2314      	movs	r3, #20
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f002 ff2c 	bl	8003e94 <memset>
  if(huart->Instance==USART3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_UART_MspInit+0x90>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d132      	bne.n	80010ac <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_UART_MspInit+0x94>)
 8001048:	69da      	ldr	r2, [r3, #28]
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_UART_MspInit+0x94>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	02c9      	lsls	r1, r1, #11
 8001050:	430a      	orrs	r2, r1
 8001052:	61da      	str	r2, [r3, #28]
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_UART_MspInit+0x94>)
 8001056:	69da      	ldr	r2, [r3, #28]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	02db      	lsls	r3, r3, #11
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_UART_MspInit+0x94>)
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_UART_MspInit+0x94>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0309      	lsls	r1, r1, #12
 800106c:	430a      	orrs	r2, r1
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_UART_MspInit+0x94>)
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	031b      	lsls	r3, r3, #12
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 800107e:	2114      	movs	r1, #20
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2281      	movs	r2, #129	; 0x81
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2202      	movs	r2, #2
 800108c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2203      	movs	r2, #3
 8001098:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2201      	movs	r2, #1
 800109e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_UART_MspInit+0x98>)
 80010a4:	0019      	movs	r1, r3
 80010a6:	0010      	movs	r0, r2
 80010a8:	f000 fafa 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b00a      	add	sp, #40	; 0x28
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40004800 	.word	0x40004800
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000800 	.word	0x48000800

080010c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_PCD_MspInit+0x38>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10d      	bne.n	80010ee <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_PCD_MspInit+0x3c>)
 80010d4:	69da      	ldr	r2, [r3, #28]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_PCD_MspInit+0x3c>)
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	0409      	lsls	r1, r1, #16
 80010dc:	430a      	orrs	r2, r1
 80010de:	61da      	str	r2, [r3, #28]
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_PCD_MspInit+0x3c>)
 80010e2:	69da      	ldr	r2, [r3, #28]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	041b      	lsls	r3, r3, #16
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b004      	add	sp, #16
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	40005c00 	.word	0x40005c00
 80010fc:	40021000 	.word	0x40021000

08001100 <NMI_Handler>:
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001128:	f000 f8ee 	bl	8001308 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <TIM2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <TIM2_IRQHandler+0x78>)
 800113a:	0018      	movs	r0, r3
 800113c:	f001 fbee 	bl	800291c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	run_update();
 8001140:	f7ff fdb6 	bl	8000cb0 <run_update>
	i++;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <TIM2_IRQHandler+0x7c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <TIM2_IRQHandler+0x7c>)
 800114e:	801a      	strh	r2, [r3, #0]
	if (i == 500) {
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <TIM2_IRQHandler+0x7c>)
 8001152:	881a      	ldrh	r2, [r3, #0]
 8001154:	23fa      	movs	r3, #250	; 0xfa
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	429a      	cmp	r2, r3
 800115a:	d124      	bne.n	80011a6 <TIM2_IRQHandler+0x72>
		i = 0;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <TIM2_IRQHandler+0x7c>)
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]
		note = rand() % 128;
 8001162:	f002 ff47 	bl	8003ff4 <rand>
 8001166:	0002      	movs	r2, r0
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <TIM2_IRQHandler+0x80>)
 800116a:	4013      	ands	r3, r2
 800116c:	d504      	bpl.n	8001178 <TIM2_IRQHandler+0x44>
 800116e:	3b01      	subs	r3, #1
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	4252      	negs	r2, r2
 8001174:	4313      	orrs	r3, r2
 8001176:	3301      	adds	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <TIM2_IRQHandler+0x84>)
 800117c:	701a      	strb	r2, [r3, #0]
		set_note(note);
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <TIM2_IRQHandler+0x84>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff fd58 	bl	8000c38 <set_note>
		if (note > 127) {
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <TIM2_IRQHandler+0x84>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	da02      	bge.n	8001198 <TIM2_IRQHandler+0x64>
			note = 0;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <TIM2_IRQHandler+0x84>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <TIM2_IRQHandler+0x88>)
 800119e:	0019      	movs	r1, r3
 80011a0:	0010      	movs	r0, r2
 80011a2:	f000 fc12 	bl	80019ca <HAL_GPIO_TogglePin>
	}
	/* USER CODE END TIM2_IRQn 1 */
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000a4 	.word	0x200000a4
 80011b0:	2000008c 	.word	0x2000008c
 80011b4:	8000007f 	.word	0x8000007f
 80011b8:	2000008e 	.word	0x2000008e
 80011bc:	48000800 	.word	0x48000800

080011c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x50>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x16>
		heap_end = &end;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <_sbrk+0x50>)
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <_sbrk+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <_sbrk+0x50>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <_sbrk+0x50>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	18d3      	adds	r3, r2, r3
 80011e4:	466a      	mov	r2, sp
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d907      	bls.n	80011fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ea:	f002 fe15 	bl	8003e18 <__errno>
 80011ee:	0003      	movs	r3, r0
 80011f0:	220c      	movs	r2, #12
 80011f2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	425b      	negs	r3, r3
 80011f8:	e006      	b.n	8001208 <_sbrk+0x48>
	}

	heap_end += incr;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <_sbrk+0x50>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	18d2      	adds	r2, r2, r3
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <_sbrk+0x50>)
 8001204:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b004      	add	sp, #16
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000434 	.word	0x20000434
 8001214:	20000448 	.word	0x20000448

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001226:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122a:	490e      	ldr	r1, [pc, #56]	; (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <LoopForever+0xe>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001240:	4c0b      	ldr	r4, [pc, #44]	; (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800124e:	f7ff ffe3 	bl	8001218 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001252:	f002 fde7 	bl	8003e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001256:	f7ff fa55 	bl	8000704 <main>

0800125a <LoopForever>:

LoopForever:
    b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001268:	080040f0 	.word	0x080040f0
  ldr r2, =_sbss
 800126c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001270:	20000448 	.word	0x20000448

08001274 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_COMP_IRQHandler>
	...

08001278 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_Init+0x24>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_Init+0x24>)
 8001282:	2110      	movs	r1, #16
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f809 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128e:	f7ff fd5d 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40022000 	.word	0x40022000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_InitTick+0x5c>)
 80012aa:	681c      	ldr	r4, [r3, #0]
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_InitTick+0x60>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	0019      	movs	r1, r3
 80012b2:	23fa      	movs	r3, #250	; 0xfa
 80012b4:	0098      	lsls	r0, r3, #2
 80012b6:	f7fe ff27 	bl	8000108 <__udivsi3>
 80012ba:	0003      	movs	r3, r0
 80012bc:	0019      	movs	r1, r3
 80012be:	0020      	movs	r0, r4
 80012c0:	f7fe ff22 	bl	8000108 <__udivsi3>
 80012c4:	0003      	movs	r3, r0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f90b 	bl	80014e2 <HAL_SYSTICK_Config>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e00f      	b.n	80012f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d80b      	bhi.n	80012f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	2301      	movs	r3, #1
 80012de:	425b      	negs	r3, r3
 80012e0:	2200      	movs	r2, #0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f8d8 	bl	8001498 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_InitTick+0x64>)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b003      	add	sp, #12
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000008 	.word	0x20000008
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x1c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	001a      	movs	r2, r3
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x20>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	18d2      	adds	r2, r2, r3
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_IncTick+0x20>)
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	20000008 	.word	0x20000008
 8001328:	20000440 	.word	0x20000440

0800132c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <HAL_GetTick+0x10>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	20000440 	.word	0x20000440

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	0002      	movs	r2, r0
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b7f      	cmp	r3, #127	; 0x7f
 8001352:	d809      	bhi.n	8001368 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	001a      	movs	r2, r3
 800135a:	231f      	movs	r3, #31
 800135c:	401a      	ands	r2, r3
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_EnableIRQ+0x30>)
 8001360:	2101      	movs	r1, #1
 8001362:	4091      	lsls	r1, r2
 8001364:	000a      	movs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
  }
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	0002      	movs	r2, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b7f      	cmp	r3, #127	; 0x7f
 8001388:	d828      	bhi.n	80013dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138a:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <__NVIC_SetPriority+0xd4>)
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	33c0      	adds	r3, #192	; 0xc0
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	589b      	ldr	r3, [r3, r2]
 800139a:	1dfa      	adds	r2, r7, #7
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	0011      	movs	r1, r2
 80013a0:	2203      	movs	r2, #3
 80013a2:	400a      	ands	r2, r1
 80013a4:	00d2      	lsls	r2, r2, #3
 80013a6:	21ff      	movs	r1, #255	; 0xff
 80013a8:	4091      	lsls	r1, r2
 80013aa:	000a      	movs	r2, r1
 80013ac:	43d2      	mvns	r2, r2
 80013ae:	401a      	ands	r2, r3
 80013b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	019b      	lsls	r3, r3, #6
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	401a      	ands	r2, r3
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	2303      	movs	r3, #3
 80013c2:	4003      	ands	r3, r0
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c8:	481f      	ldr	r0, [pc, #124]	; (8001448 <__NVIC_SetPriority+0xd4>)
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	430a      	orrs	r2, r1
 80013d4:	33c0      	adds	r3, #192	; 0xc0
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013da:	e031      	b.n	8001440 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <__NVIC_SetPriority+0xd8>)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	0019      	movs	r1, r3
 80013e4:	230f      	movs	r3, #15
 80013e6:	400b      	ands	r3, r1
 80013e8:	3b08      	subs	r3, #8
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3306      	adds	r3, #6
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	18d3      	adds	r3, r2, r3
 80013f2:	3304      	adds	r3, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1dfa      	adds	r2, r7, #7
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	0011      	movs	r1, r2
 80013fc:	2203      	movs	r2, #3
 80013fe:	400a      	ands	r2, r1
 8001400:	00d2      	lsls	r2, r2, #3
 8001402:	21ff      	movs	r1, #255	; 0xff
 8001404:	4091      	lsls	r1, r2
 8001406:	000a      	movs	r2, r1
 8001408:	43d2      	mvns	r2, r2
 800140a:	401a      	ands	r2, r3
 800140c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	019b      	lsls	r3, r3, #6
 8001412:	22ff      	movs	r2, #255	; 0xff
 8001414:	401a      	ands	r2, r3
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	0018      	movs	r0, r3
 800141c:	2303      	movs	r3, #3
 800141e:	4003      	ands	r3, r0
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <__NVIC_SetPriority+0xd8>)
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	001c      	movs	r4, r3
 800142c:	230f      	movs	r3, #15
 800142e:	4023      	ands	r3, r4
 8001430:	3b08      	subs	r3, #8
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	430a      	orrs	r2, r1
 8001436:	3306      	adds	r3, #6
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	18c3      	adds	r3, r0, r3
 800143c:	3304      	adds	r3, #4
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b003      	add	sp, #12
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <SysTick_Config+0x40>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e010      	b.n	8001488 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <SysTick_Config+0x44>)
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	3a01      	subs	r2, #1
 800146c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	2301      	movs	r3, #1
 8001470:	425b      	negs	r3, r3
 8001472:	2103      	movs	r1, #3
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff ff7d 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <SysTick_Config+0x44>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x44>)
 8001482:	2207      	movs	r2, #7
 8001484:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001486:	2300      	movs	r3, #0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}
 8001490:	00ffffff 	.word	0x00ffffff
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	210f      	movs	r1, #15
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	1c02      	adds	r2, r0, #0
 80014a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	0002      	movs	r2, r0
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff ff33 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff ffaf 	bl	8001450 <SysTick_Config>
 80014f2:	0003      	movs	r3, r0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e015      	b.n	800153a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d106      	bne.n	8001526 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fc37 	bl	8000d94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d105      	bne.n	800156c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	18d3      	adds	r3, r2, r3
 8001566:	3308      	adds	r3, #8
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e004      	b.n	8001576 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	18d3      	adds	r3, r2, r3
 8001572:	3314      	adds	r3, #20
 8001574:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b006      	add	sp, #24
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	795b      	ldrb	r3, [r3, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_DAC_ConfigChannel+0x20>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e029      	b.n	80015fc <HAL_DAC_ConfigChannel+0x74>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2202      	movs	r2, #2
 80015b2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_DAC_ConfigChannel+0x7c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	43da      	mvns	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4013      	ands	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b006      	add	sp, #24
 8001602:	bd80      	pop	{r7, pc}
 8001604:	00000ffe 	.word	0x00000ffe

08001608 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	795b      	ldrb	r3, [r3, #5]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_DAC_Start+0x16>
 800161a:	2302      	movs	r3, #2
 800161c:	e03b      	b.n	8001696 <HAL_DAC_Start+0x8e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	409a      	lsls	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10f      	bne.n	8001664 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	223c      	movs	r2, #60	; 0x3c
 800164c:	4013      	ands	r3, r2
 800164e:	2b3c      	cmp	r3, #60	; 0x3c
 8001650:	d11a      	bne.n	8001688 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e011      	b.n	8001688 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	23f0      	movs	r3, #240	; 0xf0
 800166c:	039b      	lsls	r3, r3, #14
 800166e:	401a      	ands	r2, r3
 8001670:	23f0      	movs	r3, #240	; 0xf0
 8001672:	039b      	lsls	r3, r3, #14
 8001674:	429a      	cmp	r2, r3
 8001676:	d107      	bne.n	8001688 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2102      	movs	r1, #2
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e155      	b.n	800195c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d100      	bne.n	80016c8 <HAL_GPIO_Init+0x28>
 80016c6:	e146      	b.n	8001956 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x38>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	d123      	bne.n	8001720 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	58d3      	ldr	r3, [r2, r3]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2207      	movs	r2, #7
 80016ea:	4013      	ands	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	409a      	lsls	r2, r3
 80016f2:	0013      	movs	r3, r2
 80016f4:	43da      	mvns	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2107      	movs	r1, #7
 8001704:	400b      	ands	r3, r1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	409a      	lsls	r2, r3
 800170a:	0013      	movs	r3, r2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	409a      	lsls	r2, r3
 800172e:	0013      	movs	r3, r2
 8001730:	43da      	mvns	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	409a      	lsls	r2, r3
 8001746:	0013      	movs	r3, r2
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d00b      	beq.n	8001774 <HAL_GPIO_Init+0xd4>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d007      	beq.n	8001774 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001768:	2b11      	cmp	r3, #17
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b12      	cmp	r3, #18
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	409a      	lsls	r2, r3
 8001796:	0013      	movs	r3, r2
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	43da      	mvns	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	2201      	movs	r2, #1
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	055b      	lsls	r3, r3, #21
 800180e:	4013      	ands	r3, r2
 8001810:	d100      	bne.n	8001814 <HAL_GPIO_Init+0x174>
 8001812:	e0a0      	b.n	8001956 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001814:	4b57      	ldr	r3, [pc, #348]	; (8001974 <HAL_GPIO_Init+0x2d4>)
 8001816:	699a      	ldr	r2, [r3, #24]
 8001818:	4b56      	ldr	r3, [pc, #344]	; (8001974 <HAL_GPIO_Init+0x2d4>)
 800181a:	2101      	movs	r1, #1
 800181c:	430a      	orrs	r2, r1
 800181e:	619a      	str	r2, [r3, #24]
 8001820:	4b54      	ldr	r3, [pc, #336]	; (8001974 <HAL_GPIO_Init+0x2d4>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_GPIO_Init+0x2d8>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	589b      	ldr	r3, [r3, r2]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2203      	movs	r2, #3
 800183e:	4013      	ands	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	2390      	movs	r3, #144	; 0x90
 8001854:	05db      	lsls	r3, r3, #23
 8001856:	429a      	cmp	r2, r3
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x1ee>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_GPIO_Init+0x2dc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x1ea>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a46      	ldr	r2, [pc, #280]	; (8001980 <HAL_GPIO_Init+0x2e0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x1e6>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a45      	ldr	r2, [pc, #276]	; (8001984 <HAL_GPIO_Init+0x2e4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x1e2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a44      	ldr	r2, [pc, #272]	; (8001988 <HAL_GPIO_Init+0x2e8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x1de>
 800187a:	2304      	movs	r3, #4
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 800187e:	2305      	movs	r3, #5
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x1f0>
 800188e:	2300      	movs	r3, #0
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	2103      	movs	r1, #3
 8001894:	400a      	ands	r2, r1
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a0:	4935      	ldr	r1, [pc, #212]	; (8001978 <HAL_GPIO_Init+0x2d8>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <HAL_GPIO_Init+0x2ec>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	025b      	lsls	r3, r3, #9
 80018c6:	4013      	ands	r3, r2
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_GPIO_Init+0x2ec>)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_GPIO_Init+0x2ec>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	029b      	lsls	r3, r3, #10
 80018f0:	4013      	ands	r3, r2
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_GPIO_Init+0x2ec>)
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_GPIO_Init+0x2ec>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	035b      	lsls	r3, r3, #13
 800191a:	4013      	ands	r3, r2
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_GPIO_Init+0x2ec>)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_GPIO_Init+0x2ec>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	039b      	lsls	r3, r3, #14
 8001944:	4013      	ands	r3, r2
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_GPIO_Init+0x2ec>)
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	40da      	lsrs	r2, r3
 8001964:	1e13      	subs	r3, r2, #0
 8001966:	d000      	beq.n	800196a <HAL_GPIO_Init+0x2ca>
 8001968:	e6a2      	b.n	80016b0 <HAL_GPIO_Init+0x10>
  } 
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b006      	add	sp, #24
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	0008      	movs	r0, r1
 800199a:	0011      	movs	r1, r2
 800199c:	1cbb      	adds	r3, r7, #2
 800199e:	1c02      	adds	r2, r0, #0
 80019a0:	801a      	strh	r2, [r3, #0]
 80019a2:	1c7b      	adds	r3, r7, #1
 80019a4:	1c0a      	adds	r2, r1, #0
 80019a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	1c7b      	adds	r3, r7, #1
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b0:	1cbb      	adds	r3, r7, #2
 80019b2:	881a      	ldrh	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b8:	e003      	b.n	80019c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ba:	1cbb      	adds	r3, r7, #2
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b002      	add	sp, #8
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	000a      	movs	r2, r1
 80019d4:	1cbb      	adds	r3, r7, #2
 80019d6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	1cba      	adds	r2, r7, #2
 80019de:	8812      	ldrh	r2, [r2, #0]
 80019e0:	4013      	ands	r3, r2
 80019e2:	d005      	beq.n	80019f0 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019e4:	1cbb      	adds	r3, r7, #2
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80019ee:	e003      	b.n	80019f8 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f0:	1cbb      	adds	r3, r7, #2
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	b08b      	sub	sp, #44	; 0x2c
 8001a04:	af06      	add	r7, sp, #24
 8001a06:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0d4      	b.n	8001bbc <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a6b      	ldr	r2, [pc, #428]	; (8001bc4 <HAL_PCD_Init+0x1c4>)
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d108      	bne.n	8001a30 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	238a      	movs	r3, #138	; 0x8a
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	2100      	movs	r1, #0
 8001a26:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff fb48 	bl	80010c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a64      	ldr	r2, [pc, #400]	; (8001bc4 <HAL_PCD_Init+0x1c4>)
 8001a34:	2103      	movs	r1, #3
 8001a36:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f002 f993 	bl	8003d68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a42:	230f      	movs	r3, #15
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	e043      	b.n	8001ad4 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a4c:	200f      	movs	r0, #15
 8001a4e:	183b      	adds	r3, r7, r0
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	2129      	movs	r1, #41	; 0x29
 8001a56:	015b      	lsls	r3, r3, #5
 8001a58:	18d3      	adds	r3, r2, r3
 8001a5a:	185b      	adds	r3, r3, r1
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a60:	183b      	adds	r3, r7, r0
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	2128      	movs	r1, #40	; 0x28
 8001a68:	015b      	lsls	r3, r3, #5
 8001a6a:	18d3      	adds	r3, r2, r3
 8001a6c:	185b      	adds	r3, r3, r1
 8001a6e:	183a      	adds	r2, r7, r0
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	183a      	adds	r2, r7, r0
 8001a7a:	7812      	ldrb	r2, [r2, #0]
 8001a7c:	b291      	uxth	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	18d3      	adds	r3, r2, r3
 8001a84:	3336      	adds	r3, #54	; 0x36
 8001a86:	1c0a      	adds	r2, r1, #0
 8001a88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212b      	movs	r1, #43	; 0x2b
 8001a92:	015b      	lsls	r3, r3, #5
 8001a94:	18d3      	adds	r3, r2, r3
 8001a96:	185b      	adds	r3, r3, r1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a9c:	183b      	adds	r3, r7, r0
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	18d3      	adds	r3, r2, r3
 8001aa6:	3338      	adds	r3, #56	; 0x38
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	18d3      	adds	r3, r2, r3
 8001ab6:	333c      	adds	r3, #60	; 0x3c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001abc:	183b      	adds	r3, r7, r0
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3202      	adds	r2, #2
 8001ac4:	0152      	lsls	r2, r2, #5
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aca:	183b      	adds	r3, r7, r0
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	3201      	adds	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d3b4      	bcc.n	8001a4c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae2:	230f      	movs	r3, #15
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e03f      	b.n	8001b6c <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aec:	200f      	movs	r0, #15
 8001aee:	183b      	adds	r3, r7, r0
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	232a      	movs	r3, #42	; 0x2a
 8001af6:	33ff      	adds	r3, #255	; 0xff
 8001af8:	0152      	lsls	r2, r2, #5
 8001afa:	188a      	adds	r2, r1, r2
 8001afc:	18d3      	adds	r3, r2, r3
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	2394      	movs	r3, #148	; 0x94
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	0152      	lsls	r2, r2, #5
 8001b0e:	188a      	adds	r2, r1, r2
 8001b10:	18d3      	adds	r3, r2, r3
 8001b12:	183a      	adds	r2, r7, r0
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	232c      	movs	r3, #44	; 0x2c
 8001b20:	33ff      	adds	r3, #255	; 0xff
 8001b22:	0152      	lsls	r2, r2, #5
 8001b24:	188a      	adds	r2, r1, r2
 8001b26:	18d3      	adds	r3, r2, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b2c:	183b      	adds	r3, r7, r0
 8001b2e:	781a      	ldrb	r2, [r3, #0]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	239c      	movs	r3, #156	; 0x9c
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	0152      	lsls	r2, r2, #5
 8001b38:	188a      	adds	r2, r1, r2
 8001b3a:	18d3      	adds	r3, r2, r3
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b40:	183b      	adds	r3, r7, r0
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	239e      	movs	r3, #158	; 0x9e
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	0152      	lsls	r2, r2, #5
 8001b4c:	188a      	adds	r2, r1, r2
 8001b4e:	18d3      	adds	r3, r2, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b54:	183b      	adds	r3, r7, r0
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	320a      	adds	r2, #10
 8001b5c:	0152      	lsls	r2, r2, #5
 8001b5e:	2100      	movs	r1, #0
 8001b60:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	3201      	adds	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3b8      	bcc.n	8001aec <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	466a      	mov	r2, sp
 8001b82:	0011      	movs	r1, r2
 8001b84:	001a      	movs	r2, r3
 8001b86:	3210      	adds	r2, #16
 8001b88:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001b8a:	c170      	stmia	r1!, {r4, r5, r6}
 8001b8c:	ca30      	ldmia	r2!, {r4, r5}
 8001b8e:	c130      	stmia	r1!, {r4, r5}
 8001b90:	6859      	ldr	r1, [r3, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f002 f907 	bl	8003da8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2224      	movs	r2, #36	; 0x24
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_PCD_Init+0x1c4>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d103      	bne.n	8001bba <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 f807 	bl	8001bc8 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b005      	add	sp, #20
 8001bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc4:	00000229 	.word	0x00000229

08001bc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	239a      	movs	r3, #154	; 0x9a
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	2101      	movs	r1, #1
 8001bde:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	2398      	movs	r3, #152	; 0x98
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	2100      	movs	r1, #0
 8001be8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2254      	movs	r2, #84	; 0x54
 8001bee:	5a9b      	ldrh	r3, [r3, r2]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2254      	movs	r2, #84	; 0x54
 8001bfc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2254      	movs	r2, #84	; 0x54
 8001c02:	5a9b      	ldrh	r3, [r3, r2]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2202      	movs	r2, #2
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2254      	movs	r2, #84	; 0x54
 8001c10:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b004      	add	sp, #16
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f000 fb76 	bl	800231c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	d100      	bne.n	8001c3c <HAL_RCC_OscConfig+0x20>
 8001c3a:	e08e      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c3c:	4bc5      	ldr	r3, [pc, #788]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	220c      	movs	r2, #12
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00e      	beq.n	8001c66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c48:	4bc2      	ldr	r3, [pc, #776]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d117      	bne.n	8001c84 <HAL_RCC_OscConfig+0x68>
 8001c54:	4bbf      	ldr	r3, [pc, #764]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	23c0      	movs	r3, #192	; 0xc0
 8001c5a:	025b      	lsls	r3, r3, #9
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	025b      	lsls	r3, r3, #9
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d10e      	bne.n	8001c84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4bbb      	ldr	r3, [pc, #748]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d100      	bne.n	8001c74 <HAL_RCC_OscConfig+0x58>
 8001c72:	e071      	b.n	8001d58 <HAL_RCC_OscConfig+0x13c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d000      	beq.n	8001c7e <HAL_RCC_OscConfig+0x62>
 8001c7c:	e06c      	b.n	8001d58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 fb4c 	bl	800231c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x80>
 8001c8c:	4bb1      	ldr	r3, [pc, #708]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4bb0      	ldr	r3, [pc, #704]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0249      	lsls	r1, r1, #9
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e02f      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0xa2>
 8001ca4:	4bab      	ldr	r3, [pc, #684]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4baa      	ldr	r3, [pc, #680]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001caa:	49ab      	ldr	r1, [pc, #684]	; (8001f58 <HAL_RCC_OscConfig+0x33c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4ba8      	ldr	r3, [pc, #672]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4ba7      	ldr	r3, [pc, #668]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	49a9      	ldr	r1, [pc, #676]	; (8001f5c <HAL_RCC_OscConfig+0x340>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e01e      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xc8>
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4ba2      	ldr	r3, [pc, #648]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	02c9      	lsls	r1, r1, #11
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4b9f      	ldr	r3, [pc, #636]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b9e      	ldr	r3, [pc, #632]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	0249      	lsls	r1, r1, #9
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001ce4:	4b9b      	ldr	r3, [pc, #620]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b9a      	ldr	r3, [pc, #616]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cea:	499b      	ldr	r1, [pc, #620]	; (8001f58 <HAL_RCC_OscConfig+0x33c>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	4b98      	ldr	r3, [pc, #608]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	4999      	ldr	r1, [pc, #612]	; (8001f5c <HAL_RCC_OscConfig+0x340>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fb12 	bl	800132c <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fb0d 	bl	800132c <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b64      	cmp	r3, #100	; 0x64
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e2fd      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d20:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0xf2>
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fafd 	bl	800132c <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff faf8 	bl	800132c <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e2e8      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x11c>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d100      	bne.n	8001d66 <HAL_RCC_OscConfig+0x14a>
 8001d64:	e06c      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d66:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d70:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	220c      	movs	r2, #12
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d11f      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1a0>
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	401a      	ands	r2, r3
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x188>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e2bb      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	22f8      	movs	r2, #248	; 0xf8
 8001daa:	4393      	bics	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00da      	lsls	r2, r3, #3
 8001db4:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e041      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d024      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff faac 	bl	800132c <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff faa7 	bl	800132c <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e297      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0f1      	beq.n	8001dda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	22f8      	movs	r2, #248	; 0xf8
 8001dfc:	4393      	bics	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00da      	lsls	r2, r3, #3
 8001e06:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e018      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	438a      	bics	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fa87 	bl	800132c <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fa82 	bl	800132c <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e272      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d1f1      	bne.n	8001e24 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2208      	movs	r2, #8
 8001e46:	4013      	ands	r3, r2
 8001e48:	d036      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d019      	beq.n	8001e86 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fa65 	bl	800132c <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fa60 	bl	800132c <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e250      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	d0f1      	beq.n	8001e68 <HAL_RCC_OscConfig+0x24c>
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8a:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	438a      	bics	r2, r1
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fa4b 	bl	800132c <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fa46 	bl	800132c <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e236      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d1f1      	bne.n	8001e9c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d100      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2a8>
 8001ec2:	e0b5      	b.n	8002030 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec4:	231f      	movs	r3, #31
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	055b      	lsls	r3, r3, #21
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0549      	lsls	r1, r1, #21
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	61da      	str	r2, [r3, #28]
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	69da      	ldr	r2, [r3, #28]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	055b      	lsls	r3, r3, #21
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ef4:	231f      	movs	r3, #31
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4013      	ands	r3, r2
 8001f06:	d11a      	bne.n	8001f3e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	0049      	lsls	r1, r1, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fa09 	bl	800132c <HAL_GetTick>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7ff fa04 	bl	800132c <HAL_GetTick>
 8001f24:	0002      	movs	r2, r0
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1f4      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10e      	bne.n	8001f64 <HAL_RCC_OscConfig+0x348>
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	621a      	str	r2, [r3, #32]
 8001f52:	e035      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001f54:	40021000 	.word	0x40021000
 8001f58:	fffeffff 	.word	0xfffeffff
 8001f5c:	fffbffff 	.word	0xfffbffff
 8001f60:	40007000 	.word	0x40007000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x36a>
 8001f6c:	4bca      	ldr	r3, [pc, #808]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	4bc9      	ldr	r3, [pc, #804]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	438a      	bics	r2, r1
 8001f76:	621a      	str	r2, [r3, #32]
 8001f78:	4bc7      	ldr	r3, [pc, #796]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4bc6      	ldr	r3, [pc, #792]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	2104      	movs	r1, #4
 8001f80:	438a      	bics	r2, r1
 8001f82:	621a      	str	r2, [r3, #32]
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x38c>
 8001f8e:	4bc2      	ldr	r3, [pc, #776]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	4bc1      	ldr	r3, [pc, #772]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	2104      	movs	r1, #4
 8001f96:	430a      	orrs	r2, r1
 8001f98:	621a      	str	r2, [r3, #32]
 8001f9a:	4bbf      	ldr	r3, [pc, #764]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4bbe      	ldr	r3, [pc, #760]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001fa8:	4bbb      	ldr	r3, [pc, #748]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001faa:	6a1a      	ldr	r2, [r3, #32]
 8001fac:	4bba      	ldr	r3, [pc, #744]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	621a      	str	r2, [r3, #32]
 8001fb4:	4bb8      	ldr	r3, [pc, #736]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4bb7      	ldr	r3, [pc, #732]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	2104      	movs	r1, #4
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d014      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f9b0 	bl	800132c <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff f9ab 	bl	800132c <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4aaf      	ldr	r2, [pc, #700]	; (800229c <HAL_RCC_OscConfig+0x680>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e19a      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	4bac      	ldr	r3, [pc, #688]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3b6>
 8001ff0:	e013      	b.n	800201a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f99b 	bl	800132c <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	e009      	b.n	8002010 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f996 	bl	800132c <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4aa5      	ldr	r2, [pc, #660]	; (800229c <HAL_RCC_OscConfig+0x680>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e185      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	4ba1      	ldr	r3, [pc, #644]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201a:	231f      	movs	r3, #31
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b9c      	ldr	r3, [pc, #624]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	4b9b      	ldr	r3, [pc, #620]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800202a:	499d      	ldr	r1, [pc, #628]	; (80022a0 <HAL_RCC_OscConfig+0x684>)
 800202c:	400a      	ands	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	4013      	ands	r3, r2
 8002038:	d063      	beq.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d12a      	bne.n	8002098 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002042:	4b95      	ldr	r3, [pc, #596]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002046:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002048:	2104      	movs	r1, #4
 800204a:	430a      	orrs	r2, r1
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800204e:	4b92      	ldr	r3, [pc, #584]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002052:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff f967 	bl	800132c <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002064:	f7ff f962 	bl	800132c <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e152      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d0f1      	beq.n	8002064 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002080:	4b85      	ldr	r3, [pc, #532]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	22f8      	movs	r2, #248	; 0xf8
 8002086:	4393      	bics	r3, r2
 8002088:	0019      	movs	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	00da      	lsls	r2, r3, #3
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
 8002096:	e034      	b.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	3305      	adds	r3, #5
 800209e:	d111      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020a0:	4b7d      	ldr	r3, [pc, #500]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a4:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020a6:	2104      	movs	r1, #4
 80020a8:	438a      	bics	r2, r1
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020ac:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	22f8      	movs	r2, #248	; 0xf8
 80020b2:	4393      	bics	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	00da      	lsls	r2, r3, #3
 80020bc:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34
 80020c2:	e01e      	b.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020c4:	4b74      	ldr	r3, [pc, #464]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c8:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	2104      	movs	r1, #4
 80020cc:	430a      	orrs	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020d0:	4b71      	ldr	r3, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d4:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7ff f926 	bl	800132c <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020e6:	f7ff f921 	bl	800132c <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e111      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020f8:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d1f1      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	4013      	ands	r3, r2
 800210a:	d05c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800210c:	4b62      	ldr	r3, [pc, #392]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	220c      	movs	r2, #12
 8002112:	4013      	ands	r3, r2
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d00e      	beq.n	8002136 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002118:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	220c      	movs	r2, #12
 800211e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002120:	2b08      	cmp	r3, #8
 8002122:	d114      	bne.n	800214e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002124:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	23c0      	movs	r3, #192	; 0xc0
 800212a:	025b      	lsls	r3, r3, #9
 800212c:	401a      	ands	r2, r3
 800212e:	23c0      	movs	r3, #192	; 0xc0
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	429a      	cmp	r2, r3
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	4013      	ands	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_RCC_OscConfig+0x5a8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d03c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0e6      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01b      	beq.n	800218e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215a:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	0249      	lsls	r1, r1, #9
 8002160:	430a      	orrs	r2, r1
 8002162:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff f8e2 	bl	800132c <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800216e:	f7ff f8dd 	bl	800132c <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0cd      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002180:	4b45      	ldr	r3, [pc, #276]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	025b      	lsls	r3, r3, #9
 8002188:	4013      	ands	r3, r2
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x552>
 800218c:	e01b      	b.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800218e:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002194:	4943      	ldr	r1, [pc, #268]	; (80022a4 <HAL_RCC_OscConfig+0x688>)
 8002196:	400a      	ands	r2, r1
 8002198:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7ff f8c7 	bl	800132c <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a4:	f7ff f8c2 	bl	800132c <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0b2      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x588>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d100      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5b4>
 80021ce:	e0a4      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	220c      	movs	r2, #12
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d100      	bne.n	80021de <HAL_RCC_OscConfig+0x5c2>
 80021dc:	e078      	b.n	80022d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d14c      	bne.n	8002280 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021ec:	492e      	ldr	r1, [pc, #184]	; (80022a8 <HAL_RCC_OscConfig+0x68c>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7ff f89b 	bl	800132c <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff f896 	bl	800132c <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e086      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	049b      	lsls	r3, r3, #18
 8002216:	4013      	ands	r3, r2
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	220f      	movs	r2, #15
 8002220:	4393      	bics	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <HAL_RCC_OscConfig+0x690>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	431a      	orrs	r2, r3
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	0449      	lsls	r1, r1, #17
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff f869 	bl	800132c <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff f864 	bl	800132c <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e054      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	049b      	lsls	r3, r3, #18
 800227a:	4013      	ands	r3, r2
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x644>
 800227e:	e04c      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <HAL_RCC_OscConfig+0x68c>)
 8002288:	400a      	ands	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff f84e 	bl	800132c <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x6a6>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	40021000 	.word	0x40021000
 800229c:	00001388 	.word	0x00001388
 80022a0:	efffffff 	.word	0xefffffff
 80022a4:	fffeffff 	.word	0xfffeffff
 80022a8:	feffffff 	.word	0xfeffffff
 80022ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f83c 	bl	800132c <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e02c      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_RCC_OscConfig+0x708>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	049b      	lsls	r3, r3, #18
 80022ca:	4013      	ands	r3, r2
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x694>
 80022ce:	e024      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e01f      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCC_OscConfig+0x708>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x708>)
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	025b      	lsls	r3, r3, #9
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10e      	bne.n	8002316 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	220f      	movs	r2, #15
 80022fc:	401a      	ands	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	23f0      	movs	r3, #240	; 0xf0
 800230a:	039b      	lsls	r3, r3, #14
 800230c:	401a      	ands	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b008      	add	sp, #32
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0bf      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d911      	bls.n	800236e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0a6      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d015      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d006      	beq.n	8002390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002382:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002388:	21e0      	movs	r1, #224	; 0xe0
 800238a:	00c9      	lsls	r1, r1, #3
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	22f0      	movs	r2, #240	; 0xf0
 8002396:	4393      	bics	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	d04c      	beq.n	8002448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	4013      	ands	r3, r2
 80023c0:	d120      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07a      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	049b      	lsls	r3, r3, #18
 80023d6:	4013      	ands	r3, r2
 80023d8:	d114      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06e      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	025b      	lsls	r3, r3, #9
 80023ee:	4013      	ands	r3, r2
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e062      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e05b      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002418:	f7fe ff88 	bl	800132c <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002420:	e009      	b.n	8002436 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002422:	f7fe ff83 	bl	800132c <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <HAL_RCC_ClockConfig+0x1a4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e042      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	220c      	movs	r2, #12
 800243c:	401a      	ands	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1ec      	bne.n	8002422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d211      	bcs.n	800247a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	4013      	ands	r3, r2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e020      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2204      	movs	r2, #4
 8002480:	4013      	ands	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_RCC_ClockConfig+0x1a8>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002498:	f000 f820 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 800249c:	0001      	movs	r1, r0
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	220f      	movs	r2, #15
 80024a6:	4013      	ands	r3, r2
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <HAL_RCC_ClockConfig+0x1ac>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	000a      	movs	r2, r1
 80024ae:	40da      	lsrs	r2, r3
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 80024b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7fe fef3 	bl	80012a0 <HAL_InitTick>
  
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b004      	add	sp, #16
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	00001388 	.word	0x00001388
 80024d0:	fffff8ff 	.word	0xfffff8ff
 80024d4:	080040c8 	.word	0x080040c8
 80024d8:	20000000 	.word	0x20000000

080024dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b08f      	sub	sp, #60	; 0x3c
 80024e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024e2:	2314      	movs	r3, #20
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xe8>)
 80024e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024ea:	c313      	stmia	r3!, {r0, r1, r4}
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xec>)
 80024f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024f6:	c313      	stmia	r3!, {r0, r1, r4}
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	2300      	movs	r3, #0
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	220c      	movs	r2, #12
 800251a:	4013      	ands	r3, r2
 800251c:	2b08      	cmp	r3, #8
 800251e:	d006      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x52>
 8002520:	2b0c      	cmp	r3, #12
 8002522:	d043      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0xd0>
 8002524:	2b04      	cmp	r3, #4
 8002526:	d144      	bne.n	80025b2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800252c:	e044      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	0c9b      	lsrs	r3, r3, #18
 8002532:	220f      	movs	r2, #15
 8002534:	4013      	ands	r3, r2
 8002536:	2214      	movs	r2, #20
 8002538:	18ba      	adds	r2, r7, r2
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	220f      	movs	r2, #15
 8002544:	4013      	ands	r3, r2
 8002546:	1d3a      	adds	r2, r7, #4
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	401a      	ands	r2, r3
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	429a      	cmp	r2, r3
 800255a:	d109      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800255c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255e:	481c      	ldr	r0, [pc, #112]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002560:	f7fd fdd2 	bl	8000108 <__udivsi3>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	4353      	muls	r3, r2
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
 800256e:	e01a      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002572:	23c0      	movs	r3, #192	; 0xc0
 8002574:	025b      	lsls	r3, r3, #9
 8002576:	401a      	ands	r2, r3
 8002578:	23c0      	movs	r3, #192	; 0xc0
 800257a:	025b      	lsls	r3, r3, #9
 800257c:	429a      	cmp	r2, r3
 800257e:	d109      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002582:	4814      	ldr	r0, [pc, #80]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002584:	f7fd fdc0 	bl	8000108 <__udivsi3>
 8002588:	0003      	movs	r3, r0
 800258a:	001a      	movs	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	4353      	muls	r3, r2
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
 8002592:	e008      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002596:	480e      	ldr	r0, [pc, #56]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002598:	f7fd fdb6 	bl	8000108 <__udivsi3>
 800259c:	0003      	movs	r3, r0
 800259e:	001a      	movs	r2, r3
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	4353      	muls	r3, r2
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b00f      	add	sp, #60	; 0x3c
 80025c0:	bd90      	pop	{r4, r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	08004098 	.word	0x08004098
 80025c8:	080040a8 	.word	0x080040a8
 80025cc:	40021000 	.word	0x40021000
 80025d0:	007a1200 	.word	0x007a1200
 80025d4:	02dc6c00 	.word	0x02dc6c00

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b02      	ldr	r3, [pc, #8]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025f0:	f7ff fff2 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f4:	0001      	movs	r1, r0
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	2207      	movs	r2, #7
 80025fe:	4013      	ands	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	40d9      	lsrs	r1, r3
 8002606:	000b      	movs	r3, r1
}    
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	40021000 	.word	0x40021000
 8002614:	080040d8 	.word	0x080040d8

08002618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	025b      	lsls	r3, r3, #9
 8002630:	4013      	ands	r3, r2
 8002632:	d100      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002634:	e08f      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2317      	movs	r3, #23
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	055b      	lsls	r3, r3, #21
 8002646:	4013      	ands	r3, r2
 8002648:	d111      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	0549      	lsls	r1, r1, #21
 8002654:	430a      	orrs	r2, r1
 8002656:	61da      	str	r2, [r3, #28]
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	055b      	lsls	r3, r3, #21
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2317      	movs	r3, #23
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b64      	ldr	r3, [pc, #400]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4013      	ands	r3, r2
 8002678:	d11a      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267a:	4b61      	ldr	r3, [pc, #388]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b60      	ldr	r3, [pc, #384]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	0049      	lsls	r1, r1, #1
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002688:	f7fe fe50 	bl	800132c <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	e008      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002692:	f7fe fe4b 	bl	800132c <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b64      	cmp	r3, #100	; 0x64
 800269e:	d901      	bls.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0a6      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	4b56      	ldr	r3, [pc, #344]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4013      	ands	r3, r2
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026b0:	4b52      	ldr	r3, [pc, #328]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b2:	6a1a      	ldr	r2, [r3, #32]
 80026b4:	23c0      	movs	r3, #192	; 0xc0
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d034      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	23c0      	movs	r3, #192	; 0xc0
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4013      	ands	r3, r2
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d02c      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d2:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a4b      	ldr	r2, [pc, #300]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80026d8:	4013      	ands	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026dc:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	0249      	lsls	r1, r1, #9
 80026e6:	430a      	orrs	r2, r1
 80026e8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ea:	4b44      	ldr	r3, [pc, #272]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026f0:	4945      	ldr	r1, [pc, #276]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d013      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fe12 	bl	800132c <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e009      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fe0d 	bl	800132c <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	4a3c      	ldr	r2, [pc, #240]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e067      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	4b36      	ldr	r3, [pc, #216]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	2202      	movs	r2, #2
 8002728:	4013      	ands	r3, r2
 800272a:	d0f0      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800272c:	4b33      	ldr	r3, [pc, #204]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a34      	ldr	r2, [pc, #208]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800273c:	430a      	orrs	r2, r1
 800273e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002740:	2317      	movs	r3, #23
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002750:	492f      	ldr	r1, [pc, #188]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002752:	400a      	ands	r2, r1
 8002754:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	2203      	movs	r2, #3
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002770:	430a      	orrs	r2, r1
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2202      	movs	r2, #2
 800277a:	4013      	ands	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a24      	ldr	r2, [pc, #144]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800278e:	430a      	orrs	r2, r1
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2220      	movs	r2, #32
 8002798:	4013      	ands	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	2210      	movs	r2, #16
 80027a2:	4393      	bics	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027ac:	430a      	orrs	r2, r1
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	029b      	lsls	r3, r3, #10
 80027b8:	4013      	ands	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4013      	ands	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027dc:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	4393      	bics	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b006      	add	sp, #24
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	40021000 	.word	0x40021000
 8002800:	40007000 	.word	0x40007000
 8002804:	fffffcff 	.word	0xfffffcff
 8002808:	fffeffff 	.word	0xfffeffff
 800280c:	00001388 	.word	0x00001388
 8002810:	efffffff 	.word	0xefffffff
 8002814:	fffcffff 	.word	0xfffcffff

08002818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e01e      	b.n	8002868 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223d      	movs	r2, #61	; 0x3d
 800282e:	5c9b      	ldrb	r3, [r3, r2]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d107      	bne.n	8002846 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	223c      	movs	r2, #60	; 0x3c
 800283a:	2100      	movs	r1, #0
 800283c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f7fe faed 	bl	8000e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	223d      	movs	r2, #61	; 0x3d
 800284a:	2102      	movs	r1, #2
 800284c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	0019      	movs	r1, r3
 8002858:	0010      	movs	r0, r2
 800285a:	f000 faa9 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	223d      	movs	r2, #61	; 0x3d
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2207      	movs	r2, #7
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b06      	cmp	r3, #6
 8002898:	d007      	beq.n	80028aa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e01e      	b.n	8002904 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	223d      	movs	r2, #61	; 0x3d
 80028ca:	5c9b      	ldrb	r3, [r3, r2]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	223c      	movs	r2, #60	; 0x3c
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 f815 	bl	800290c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223d      	movs	r2, #61	; 0x3d
 80028e6:	2102      	movs	r1, #2
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	0019      	movs	r1, r3
 80028f4:	0010      	movs	r0, r2
 80028f6:	f000 fa5b 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	223d      	movs	r2, #61	; 0x3d
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d124      	bne.n	800297c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d11d      	bne.n	800297c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2203      	movs	r2, #3
 8002946:	4252      	negs	r2, r2
 8002948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2203      	movs	r2, #3
 8002958:	4013      	ands	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 fa0e 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002964:	e007      	b.n	8002976 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f000 fa01 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 fa0d 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2204      	movs	r2, #4
 8002984:	4013      	ands	r3, r2
 8002986:	2b04      	cmp	r3, #4
 8002988:	d125      	bne.n	80029d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2204      	movs	r2, #4
 8002992:	4013      	ands	r3, r2
 8002994:	2b04      	cmp	r3, #4
 8002996:	d11e      	bne.n	80029d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2205      	movs	r2, #5
 800299e:	4252      	negs	r2, r2
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	23c0      	movs	r3, #192	; 0xc0
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f9e1 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 80029be:	e007      	b.n	80029d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 f9d4 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f9e0 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2208      	movs	r2, #8
 80029de:	4013      	ands	r3, r2
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d124      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2208      	movs	r2, #8
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d11d      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2209      	movs	r2, #9
 80029f8:	4252      	negs	r2, r2
 80029fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2204      	movs	r2, #4
 8002a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2203      	movs	r2, #3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 f9b5 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002a16:	e007      	b.n	8002a28 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f9a8 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f9b4 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2210      	movs	r2, #16
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d125      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2210      	movs	r2, #16
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d11e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2211      	movs	r2, #17
 8002a50:	4252      	negs	r2, r2
 8002a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2208      	movs	r2, #8
 8002a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	23c0      	movs	r3, #192	; 0xc0
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 f988 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002a70:	e007      	b.n	8002a82 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f97b 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f987 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10f      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d108      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4252      	negs	r2, r2
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 f955 	bl	8002d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d10f      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d108      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2281      	movs	r2, #129	; 0x81
 8002ad8:	4252      	negs	r2, r2
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 fce2 	bl	80034a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2240      	movs	r2, #64	; 0x40
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d10f      	bne.n	8002b12 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2240      	movs	r2, #64	; 0x40
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d108      	bne.n	8002b12 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2241      	movs	r2, #65	; 0x41
 8002b06:	4252      	negs	r2, r2
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f947 	bl	8002da0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d10f      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d108      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2221      	movs	r2, #33	; 0x21
 8002b34:	4252      	negs	r2, r2
 8002b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 fcac 	bl	8003498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	223c      	movs	r2, #60	; 0x3c
 8002b58:	5c9b      	ldrb	r3, [r3, r2]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e03c      	b.n	8002bdc <HAL_TIM_OC_ConfigChannel+0x94>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	223c      	movs	r2, #60	; 0x3c
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	223d      	movs	r2, #61	; 0x3d
 8002b6e:	2102      	movs	r1, #2
 8002b70:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d010      	beq.n	8002b9a <HAL_TIM_OC_ConfigChannel+0x52>
 8002b78:	d802      	bhi.n	8002b80 <HAL_TIM_OC_ConfigChannel+0x38>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8002b7e:	e024      	b.n	8002bca <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d012      	beq.n	8002baa <HAL_TIM_OC_ConfigChannel+0x62>
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d018      	beq.n	8002bba <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8002b88:	e01f      	b.n	8002bca <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	0011      	movs	r1, r2
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 f98c 	bl	8002eb0 <TIM_OC1_SetConfig>
      break;
 8002b98:	e017      	b.n	8002bca <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	0011      	movs	r1, r2
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 fa0c 	bl	8002fc0 <TIM_OC2_SetConfig>
      break;
 8002ba8:	e00f      	b.n	8002bca <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 fa88 	bl	80030c8 <TIM_OC3_SetConfig>
      break;
 8002bb8:	e007      	b.n	8002bca <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fb06 	bl	80031d4 <TIM_OC4_SetConfig>
      break;
 8002bc8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	223d      	movs	r2, #61	; 0x3d
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	223c      	movs	r2, #60	; 0x3c
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	223c      	movs	r2, #60	; 0x3c
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_TIM_ConfigClockSource+0x18>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e0ab      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x170>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	223c      	movs	r2, #60	; 0x3c
 8002c00:	2101      	movs	r1, #1
 8002c02:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	223d      	movs	r2, #61	; 0x3d
 8002c08:	2102      	movs	r1, #2
 8002c0a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2277      	movs	r2, #119	; 0x77
 8002c18:	4393      	bics	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a4f      	ldr	r2, [pc, #316]	; (8002d5c <HAL_TIM_ConfigClockSource+0x178>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	d100      	bne.n	8002c36 <HAL_TIM_ConfigClockSource+0x52>
 8002c34:	e06b      	b.n	8002d0e <HAL_TIM_ConfigClockSource+0x12a>
 8002c36:	d80e      	bhi.n	8002c56 <HAL_TIM_ConfigClockSource+0x72>
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d100      	bne.n	8002c3e <HAL_TIM_ConfigClockSource+0x5a>
 8002c3c:	e077      	b.n	8002d2e <HAL_TIM_ConfigClockSource+0x14a>
 8002c3e:	d803      	bhi.n	8002c48 <HAL_TIM_ConfigClockSource+0x64>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d100      	bne.n	8002c46 <HAL_TIM_ConfigClockSource+0x62>
 8002c44:	e073      	b.n	8002d2e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c46:	e07c      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d100      	bne.n	8002c4e <HAL_TIM_ConfigClockSource+0x6a>
 8002c4c:	e06f      	b.n	8002d2e <HAL_TIM_ConfigClockSource+0x14a>
 8002c4e:	2b30      	cmp	r3, #48	; 0x30
 8002c50:	d100      	bne.n	8002c54 <HAL_TIM_ConfigClockSource+0x70>
 8002c52:	e06c      	b.n	8002d2e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002c54:	e075      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002c56:	2b70      	cmp	r3, #112	; 0x70
 8002c58:	d00e      	beq.n	8002c78 <HAL_TIM_ConfigClockSource+0x94>
 8002c5a:	d804      	bhi.n	8002c66 <HAL_TIM_ConfigClockSource+0x82>
 8002c5c:	2b50      	cmp	r3, #80	; 0x50
 8002c5e:	d036      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0xea>
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d044      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002c64:	e06d      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	0152      	lsls	r2, r2, #5
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d068      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0x15c>
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	0192      	lsls	r2, r2, #6
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d017      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002c76:	e064      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6899      	ldr	r1, [r3, #8]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f000 fb88 	bl	800339c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2277      	movs	r2, #119	; 0x77
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]
      break;
 8002ca4:	e04d      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f000 fb71 	bl	800339c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	01c9      	lsls	r1, r1, #7
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
      break;
 8002ccc:	e039      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	001a      	movs	r2, r3
 8002cdc:	f000 fae4 	bl	80032a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2150      	movs	r1, #80	; 0x50
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 fb3e 	bl	8003368 <TIM_ITRx_SetConfig>
      break;
 8002cec:	e029      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	f000 fb02 	bl	8003304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2160      	movs	r1, #96	; 0x60
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 fb2e 	bl	8003368 <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e019      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	f000 fac4 	bl	80032a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2140      	movs	r1, #64	; 0x40
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fb1e 	bl	8003368 <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e009      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f000 fb15 	bl	8003368 <TIM_ITRx_SetConfig>
      break;
 8002d3e:	e000      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002d40:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	223d      	movs	r2, #61	; 0x3d
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	223c      	movs	r2, #60	; 0x3c
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	ffff00ff 	.word	0xffff00ff

08002d60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a34      	ldr	r2, [pc, #208]	; (8002e94 <TIM_Base_SetConfig+0xe4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d008      	beq.n	8002dda <TIM_Base_SetConfig+0x2a>
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x2a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a30      	ldr	r2, [pc, #192]	; (8002e98 <TIM_Base_SetConfig+0xe8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2270      	movs	r2, #112	; 0x70
 8002dde:	4393      	bics	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <TIM_Base_SetConfig+0xe4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d018      	beq.n	8002e26 <TIM_Base_SetConfig+0x76>
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	05db      	lsls	r3, r3, #23
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d013      	beq.n	8002e26 <TIM_Base_SetConfig+0x76>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <TIM_Base_SetConfig+0xe8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00f      	beq.n	8002e26 <TIM_Base_SetConfig+0x76>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <TIM_Base_SetConfig+0xec>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <TIM_Base_SetConfig+0x76>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <TIM_Base_SetConfig+0xf0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <TIM_Base_SetConfig+0x76>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <TIM_Base_SetConfig+0xf4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <TIM_Base_SetConfig+0x76>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <TIM_Base_SetConfig+0xf8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a20      	ldr	r2, [pc, #128]	; (8002eac <TIM_Base_SetConfig+0xfc>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	001a      	movs	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <TIM_Base_SetConfig+0xe4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <TIM_Base_SetConfig+0xce>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <TIM_Base_SetConfig+0xf0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <TIM_Base_SetConfig+0xce>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <TIM_Base_SetConfig+0xf4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_Base_SetConfig+0xce>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <TIM_Base_SetConfig+0xf8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d103      	bne.n	8002e86 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	615a      	str	r2, [r3, #20]
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b004      	add	sp, #16
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40002000 	.word	0x40002000
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40014400 	.word	0x40014400
 8002ea8:	40014800 	.word	0x40014800
 8002eac:	fffffcff 	.word	0xfffffcff

08002eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4393      	bics	r3, r2
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2270      	movs	r2, #112	; 0x70
 8002ede:	4393      	bics	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	4393      	bics	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	4393      	bics	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <TIM_OC1_SetConfig+0xf8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_OC1_SetConfig+0x76>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a26      	ldr	r2, [pc, #152]	; (8002fac <TIM_OC1_SetConfig+0xfc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <TIM_OC1_SetConfig+0x76>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <TIM_OC1_SetConfig+0x100>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_OC1_SetConfig+0x76>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <TIM_OC1_SetConfig+0x104>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10c      	bne.n	8002f40 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <TIM_OC1_SetConfig+0xf8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <TIM_OC1_SetConfig+0xb0>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <TIM_OC1_SetConfig+0xfc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_OC1_SetConfig+0xb0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <TIM_OC1_SetConfig+0x100>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_OC1_SetConfig+0xb0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <TIM_OC1_SetConfig+0x104>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d111      	bne.n	8002f84 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <TIM_OC1_SetConfig+0x108>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <TIM_OC1_SetConfig+0x10c>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b006      	add	sp, #24
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40014400 	.word	0x40014400
 8002fb4:	40014800 	.word	0x40014800
 8002fb8:	fffffeff 	.word	0xfffffeff
 8002fbc:	fffffdff 	.word	0xfffffdff

08002fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4a2e      	ldr	r2, [pc, #184]	; (80030a8 <TIM_OC2_SetConfig+0xe8>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a2d      	ldr	r2, [pc, #180]	; (80030ac <TIM_OC2_SetConfig+0xec>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2220      	movs	r2, #32
 800300a:	4393      	bics	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <TIM_OC2_SetConfig+0xf0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10d      	bne.n	800303e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	4393      	bics	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	4393      	bics	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <TIM_OC2_SetConfig+0xf0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00b      	beq.n	800305e <TIM_OC2_SetConfig+0x9e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1a      	ldr	r2, [pc, #104]	; (80030b4 <TIM_OC2_SetConfig+0xf4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <TIM_OC2_SetConfig+0x9e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <TIM_OC2_SetConfig+0xf8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d003      	beq.n	800305e <TIM_OC2_SetConfig+0x9e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a18      	ldr	r2, [pc, #96]	; (80030bc <TIM_OC2_SetConfig+0xfc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d113      	bne.n	8003086 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <TIM_OC2_SetConfig+0x100>)
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <TIM_OC2_SetConfig+0x104>)
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	621a      	str	r2, [r3, #32]
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b006      	add	sp, #24
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	ffff8fff 	.word	0xffff8fff
 80030ac:	fffffcff 	.word	0xfffffcff
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40014400 	.word	0x40014400
 80030bc:	40014800 	.word	0x40014800
 80030c0:	fffffbff 	.word	0xfffffbff
 80030c4:	fffff7ff 	.word	0xfffff7ff

080030c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a35      	ldr	r2, [pc, #212]	; (80031ac <TIM_OC3_SetConfig+0xe4>)
 80030d8:	401a      	ands	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2270      	movs	r2, #112	; 0x70
 80030f4:	4393      	bics	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2203      	movs	r2, #3
 80030fc:	4393      	bics	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <TIM_OC3_SetConfig+0xe8>)
 800310e:	4013      	ands	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <TIM_OC3_SetConfig+0xec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10d      	bne.n	8003142 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <TIM_OC3_SetConfig+0xf0>)
 800312a:	4013      	ands	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <TIM_OC3_SetConfig+0xf4>)
 800313e:	4013      	ands	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <TIM_OC3_SetConfig+0xec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00b      	beq.n	8003162 <TIM_OC3_SetConfig+0x9a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <TIM_OC3_SetConfig+0xf8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <TIM_OC3_SetConfig+0x9a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <TIM_OC3_SetConfig+0xfc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_OC3_SetConfig+0x9a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <TIM_OC3_SetConfig+0x100>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d113      	bne.n	800318a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <TIM_OC3_SetConfig+0x104>)
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <TIM_OC3_SetConfig+0x108>)
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	621a      	str	r2, [r3, #32]
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b006      	add	sp, #24
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	fffffeff 	.word	0xfffffeff
 80031b0:	fffffdff 	.word	0xfffffdff
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	fffff7ff 	.word	0xfffff7ff
 80031bc:	fffffbff 	.word	0xfffffbff
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800
 80031cc:	ffffefff 	.word	0xffffefff
 80031d0:	ffffdfff 	.word	0xffffdfff

080031d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a28      	ldr	r2, [pc, #160]	; (8003284 <TIM_OC4_SetConfig+0xb0>)
 80031e4:	401a      	ands	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a22      	ldr	r2, [pc, #136]	; (8003288 <TIM_OC4_SetConfig+0xb4>)
 8003200:	4013      	ands	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <TIM_OC4_SetConfig+0xb8>)
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <TIM_OC4_SetConfig+0xbc>)
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	031b      	lsls	r3, r3, #12
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a19      	ldr	r2, [pc, #100]	; (8003294 <TIM_OC4_SetConfig+0xc0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_OC4_SetConfig+0x78>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <TIM_OC4_SetConfig+0xc4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_OC4_SetConfig+0x78>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <TIM_OC4_SetConfig+0xc8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_OC4_SetConfig+0x78>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <TIM_OC4_SetConfig+0xcc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d109      	bne.n	8003260 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <TIM_OC4_SetConfig+0xd0>)
 8003250:	4013      	ands	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b006      	add	sp, #24
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	ffffefff 	.word	0xffffefff
 8003288:	ffff8fff 	.word	0xffff8fff
 800328c:	fffffcff 	.word	0xfffffcff
 8003290:	ffffdfff 	.word	0xffffdfff
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800
 80032a4:	ffffbfff 	.word	0xffffbfff

080032a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	2201      	movs	r2, #1
 80032c0:	4393      	bics	r3, r2
 80032c2:	001a      	movs	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	22f0      	movs	r2, #240	; 0xf0
 80032d2:	4393      	bics	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	220a      	movs	r2, #10
 80032e4:	4393      	bics	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b006      	add	sp, #24
 8003302:	bd80      	pop	{r7, pc}

08003304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	2210      	movs	r2, #16
 8003316:	4393      	bics	r3, r2
 8003318:	001a      	movs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <TIM_TI2_ConfigInputStage+0x60>)
 800332e:	4013      	ands	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	031b      	lsls	r3, r3, #12
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	22a0      	movs	r2, #160	; 0xa0
 8003340:	4393      	bics	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	621a      	str	r2, [r3, #32]
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	ffff0fff 	.word	0xffff0fff

08003368 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2270      	movs	r2, #112	; 0x70
 800337c:	4393      	bics	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	2207      	movs	r2, #7
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	609a      	str	r2, [r3, #8]
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b004      	add	sp, #16
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <TIM_ETR_SetConfig+0x3c>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	021a      	lsls	r2, r3, #8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	431a      	orrs	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b006      	add	sp, #24
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	ffff00ff 	.word	0xffff00ff

080033dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223c      	movs	r2, #60	; 0x3c
 80033ea:	5c9b      	ldrb	r3, [r3, r2]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e047      	b.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	223c      	movs	r2, #60	; 0x3c
 80033f8:	2101      	movs	r1, #1
 80033fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	223d      	movs	r2, #61	; 0x3d
 8003400:	2102      	movs	r1, #2
 8003402:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2270      	movs	r2, #112	; 0x70
 8003418:	4393      	bics	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00f      	beq.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	05db      	lsls	r3, r3, #23
 8003440:	429a      	cmp	r2, r3
 8003442:	d009      	beq.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a10      	ldr	r2, [pc, #64]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10c      	bne.n	8003472 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	4393      	bics	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	4313      	orrs	r3, r2
 8003468:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223d      	movs	r2, #61	; 0x3d
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223c      	movs	r2, #60	; 0x3c
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40000400 	.word	0x40000400
 8003494:	40014000 	.word	0x40014000

08003498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e074      	b.n	80035b4 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	223c      	movs	r2, #60	; 0x3c
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	223d      	movs	r2, #61	; 0x3d
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fd fcff 	bl	8000ee4 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	223c      	movs	r2, #60	; 0x3c
 80034ea:	2102      	movs	r1, #2
 80034ec:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003504:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800350c:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003512:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003518:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800351e:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8003524:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800352a:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7b1b      	ldrb	r3, [r3, #12]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d108      	bne.n	800354e <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2180      	movs	r1, #128	; 0x80
 8003548:	0249      	lsls	r1, r1, #9
 800354a:	430a      	orrs	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	43d2      	mvns	r2, r2
 8003564:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800357e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681c      	ldr	r4, [r3, #0]
 8003588:	0010      	movs	r0, r2
 800358a:	f000 f817 	bl	80035bc <TSC_extract_groups>
 800358e:	0003      	movs	r3, r0
 8003590:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2103      	movs	r1, #3
 800359e:	438a      	bics	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2203      	movs	r2, #3
 80035a8:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	223c      	movs	r2, #60	; 0x3c
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b003      	add	sp, #12
 80035ba:	bd90      	pop	{r4, r7, pc}

080035bc <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	e011      	b.n	80035f2 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4013      	ands	r3, r2
 80035dc:	d006      	beq.n	80035ec <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80035de:	2201      	movs	r2, #1
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b07      	cmp	r3, #7
 80035f6:	d9ea      	bls.n	80035ce <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80035f8:	68fb      	ldr	r3, [r7, #12]
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e044      	b.n	80036a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	2b00      	cmp	r3, #0
 800361c:	d107      	bne.n	800362e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2270      	movs	r2, #112	; 0x70
 8003622:	2100      	movs	r1, #0
 8003624:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f7fd fcfb 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2224      	movs	r2, #36	; 0x24
 8003632:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2101      	movs	r1, #1
 8003640:	438a      	bics	r2, r1
 8003642:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f000 f830 	bl	80036ac <UART_SetConfig>
 800364c:	0003      	movs	r3, r0
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e024      	b.n	80036a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 f9ef 	bl	8003a44 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	490d      	ldr	r1, [pc, #52]	; (80036a8 <HAL_UART_Init+0xa4>)
 8003672:	400a      	ands	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	212a      	movs	r1, #42	; 0x2a
 8003682:	438a      	bics	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2101      	movs	r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 fa87 	bl	8003bac <UART_CheckIdleState>
 800369e:	0003      	movs	r3, r0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	ffffb7ff 	.word	0xffffb7ff

080036ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036b8:	2317      	movs	r3, #23
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4ac5      	ldr	r2, [pc, #788]	; (80039f4 <UART_SetConfig+0x348>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4ac0      	ldr	r2, [pc, #768]	; (80039f8 <UART_SetConfig+0x34c>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4ab7      	ldr	r2, [pc, #732]	; (80039fc <UART_SetConfig+0x350>)
 800371e:	4013      	ands	r3, r2
 8003720:	0019      	movs	r1, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4ab3      	ldr	r2, [pc, #716]	; (8003a00 <UART_SetConfig+0x354>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d125      	bne.n	8003782 <UART_SetConfig+0xd6>
 8003736:	4bb3      	ldr	r3, [pc, #716]	; (8003a04 <UART_SetConfig+0x358>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	2203      	movs	r2, #3
 800373c:	4013      	ands	r3, r2
 800373e:	2b01      	cmp	r3, #1
 8003740:	d00f      	beq.n	8003762 <UART_SetConfig+0xb6>
 8003742:	d304      	bcc.n	800374e <UART_SetConfig+0xa2>
 8003744:	2b02      	cmp	r3, #2
 8003746:	d011      	beq.n	800376c <UART_SetConfig+0xc0>
 8003748:	2b03      	cmp	r3, #3
 800374a:	d005      	beq.n	8003758 <UART_SetConfig+0xac>
 800374c:	e013      	b.n	8003776 <UART_SetConfig+0xca>
 800374e:	231f      	movs	r3, #31
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e064      	b.n	8003822 <UART_SetConfig+0x176>
 8003758:	231f      	movs	r3, #31
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e05f      	b.n	8003822 <UART_SetConfig+0x176>
 8003762:	231f      	movs	r3, #31
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	2204      	movs	r2, #4
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e05a      	b.n	8003822 <UART_SetConfig+0x176>
 800376c:	231f      	movs	r3, #31
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2208      	movs	r2, #8
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e055      	b.n	8003822 <UART_SetConfig+0x176>
 8003776:	231f      	movs	r3, #31
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2210      	movs	r2, #16
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	e04f      	b.n	8003822 <UART_SetConfig+0x176>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4aa0      	ldr	r2, [pc, #640]	; (8003a08 <UART_SetConfig+0x35c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d132      	bne.n	80037f2 <UART_SetConfig+0x146>
 800378c:	4b9d      	ldr	r3, [pc, #628]	; (8003a04 <UART_SetConfig+0x358>)
 800378e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003790:	23c0      	movs	r3, #192	; 0xc0
 8003792:	029b      	lsls	r3, r3, #10
 8003794:	4013      	ands	r3, r2
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	0252      	lsls	r2, r2, #9
 800379a:	4293      	cmp	r3, r2
 800379c:	d019      	beq.n	80037d2 <UART_SetConfig+0x126>
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	0252      	lsls	r2, r2, #9
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d802      	bhi.n	80037ac <UART_SetConfig+0x100>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <UART_SetConfig+0x112>
 80037aa:	e01c      	b.n	80037e6 <UART_SetConfig+0x13a>
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	0292      	lsls	r2, r2, #10
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <UART_SetConfig+0x130>
 80037b4:	22c0      	movs	r2, #192	; 0xc0
 80037b6:	0292      	lsls	r2, r2, #10
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d005      	beq.n	80037c8 <UART_SetConfig+0x11c>
 80037bc:	e013      	b.n	80037e6 <UART_SetConfig+0x13a>
 80037be:	231f      	movs	r3, #31
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e02c      	b.n	8003822 <UART_SetConfig+0x176>
 80037c8:	231f      	movs	r3, #31
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2202      	movs	r2, #2
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e027      	b.n	8003822 <UART_SetConfig+0x176>
 80037d2:	231f      	movs	r3, #31
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	2204      	movs	r2, #4
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	e022      	b.n	8003822 <UART_SetConfig+0x176>
 80037dc:	231f      	movs	r3, #31
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2208      	movs	r2, #8
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e01d      	b.n	8003822 <UART_SetConfig+0x176>
 80037e6:	231f      	movs	r3, #31
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	2210      	movs	r2, #16
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	e017      	b.n	8003822 <UART_SetConfig+0x176>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a85      	ldr	r2, [pc, #532]	; (8003a0c <UART_SetConfig+0x360>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d104      	bne.n	8003806 <UART_SetConfig+0x15a>
 80037fc:	231f      	movs	r3, #31
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e00d      	b.n	8003822 <UART_SetConfig+0x176>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a81      	ldr	r2, [pc, #516]	; (8003a10 <UART_SetConfig+0x364>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d104      	bne.n	800381a <UART_SetConfig+0x16e>
 8003810:	231f      	movs	r3, #31
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e003      	b.n	8003822 <UART_SetConfig+0x176>
 800381a:	231f      	movs	r3, #31
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	2210      	movs	r2, #16
 8003820:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	429a      	cmp	r2, r3
 800382c:	d000      	beq.n	8003830 <UART_SetConfig+0x184>
 800382e:	e07d      	b.n	800392c <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8003830:	231f      	movs	r3, #31
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d01c      	beq.n	8003874 <UART_SetConfig+0x1c8>
 800383a:	dc02      	bgt.n	8003842 <UART_SetConfig+0x196>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <UART_SetConfig+0x1a0>
 8003840:	e04b      	b.n	80038da <UART_SetConfig+0x22e>
 8003842:	2b04      	cmp	r3, #4
 8003844:	d025      	beq.n	8003892 <UART_SetConfig+0x1e6>
 8003846:	2b08      	cmp	r3, #8
 8003848:	d037      	beq.n	80038ba <UART_SetConfig+0x20e>
 800384a:	e046      	b.n	80038da <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe fece 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8003850:	0003      	movs	r3, r0
 8003852:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	005a      	lsls	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	18d2      	adds	r2, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f7fc fc4e 	bl	8000108 <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	b29b      	uxth	r3, r3
 8003870:	61bb      	str	r3, [r7, #24]
        break;
 8003872:	e037      	b.n	80038e4 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	4a66      	ldr	r2, [pc, #408]	; (8003a14 <UART_SetConfig+0x368>)
 800387c:	189a      	adds	r2, r3, r2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	0019      	movs	r1, r3
 8003884:	0010      	movs	r0, r2
 8003886:	f7fc fc3f 	bl	8000108 <__udivsi3>
 800388a:	0003      	movs	r3, r0
 800388c:	b29b      	uxth	r3, r3
 800388e:	61bb      	str	r3, [r7, #24]
        break;
 8003890:	e028      	b.n	80038e4 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003892:	f7fe fe23 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8003896:	0003      	movs	r3, r0
 8003898:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	005a      	lsls	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	18d2      	adds	r2, r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0019      	movs	r1, r3
 80038ac:	0010      	movs	r0, r2
 80038ae:	f7fc fc2b 	bl	8000108 <__udivsi3>
 80038b2:	0003      	movs	r3, r0
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	61bb      	str	r3, [r7, #24]
        break;
 80038b8:	e014      	b.n	80038e4 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	0252      	lsls	r2, r2, #9
 80038c4:	189a      	adds	r2, r3, r2
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f7fc fc1b 	bl	8000108 <__udivsi3>
 80038d2:	0003      	movs	r3, r0
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	61bb      	str	r3, [r7, #24]
        break;
 80038d8:	e004      	b.n	80038e4 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 80038da:	2317      	movs	r3, #23
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
        break;
 80038e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b0f      	cmp	r3, #15
 80038e8:	d91b      	bls.n	8003922 <UART_SetConfig+0x276>
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4a4a      	ldr	r2, [pc, #296]	; (8003a18 <UART_SetConfig+0x36c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d817      	bhi.n	8003922 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	200a      	movs	r0, #10
 80038f8:	183b      	adds	r3, r7, r0
 80038fa:	210f      	movs	r1, #15
 80038fc:	438a      	bics	r2, r1
 80038fe:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	2207      	movs	r2, #7
 8003908:	4013      	ands	r3, r2
 800390a:	b299      	uxth	r1, r3
 800390c:	183b      	adds	r3, r7, r0
 800390e:	183a      	adds	r2, r7, r0
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	183a      	adds	r2, r7, r0
 800391c:	8812      	ldrh	r2, [r2, #0]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	e082      	b.n	8003a28 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8003922:	2317      	movs	r3, #23
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e07d      	b.n	8003a28 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 800392c:	231f      	movs	r3, #31
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d01b      	beq.n	800396e <UART_SetConfig+0x2c2>
 8003936:	dc02      	bgt.n	800393e <UART_SetConfig+0x292>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <UART_SetConfig+0x29c>
 800393c:	e049      	b.n	80039d2 <UART_SetConfig+0x326>
 800393e:	2b04      	cmp	r3, #4
 8003940:	d024      	beq.n	800398c <UART_SetConfig+0x2e0>
 8003942:	2b08      	cmp	r3, #8
 8003944:	d035      	beq.n	80039b2 <UART_SetConfig+0x306>
 8003946:	e044      	b.n	80039d2 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003948:	f7fe fe50 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 800394c:	0003      	movs	r3, r0
 800394e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	085a      	lsrs	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	18d2      	adds	r2, r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0019      	movs	r1, r3
 8003960:	0010      	movs	r0, r2
 8003962:	f7fc fbd1 	bl	8000108 <__udivsi3>
 8003966:	0003      	movs	r3, r0
 8003968:	b29b      	uxth	r3, r3
 800396a:	61bb      	str	r3, [r7, #24]
        break;
 800396c:	e036      	b.n	80039dc <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <UART_SetConfig+0x370>)
 8003976:	189a      	adds	r2, r3, r2
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	0019      	movs	r1, r3
 800397e:	0010      	movs	r0, r2
 8003980:	f7fc fbc2 	bl	8000108 <__udivsi3>
 8003984:	0003      	movs	r3, r0
 8003986:	b29b      	uxth	r3, r3
 8003988:	61bb      	str	r3, [r7, #24]
        break;
 800398a:	e027      	b.n	80039dc <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398c:	f7fe fda6 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8003990:	0003      	movs	r3, r0
 8003992:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	085a      	lsrs	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	18d2      	adds	r2, r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	0019      	movs	r1, r3
 80039a4:	0010      	movs	r0, r2
 80039a6:	f7fc fbaf 	bl	8000108 <__udivsi3>
 80039aa:	0003      	movs	r3, r0
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	61bb      	str	r3, [r7, #24]
        break;
 80039b0:	e014      	b.n	80039dc <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	0212      	lsls	r2, r2, #8
 80039bc:	189a      	adds	r2, r3, r2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	0019      	movs	r1, r3
 80039c4:	0010      	movs	r0, r2
 80039c6:	f7fc fb9f 	bl	8000108 <__udivsi3>
 80039ca:	0003      	movs	r3, r0
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	61bb      	str	r3, [r7, #24]
        break;
 80039d0:	e004      	b.n	80039dc <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 80039d2:	2317      	movs	r3, #23
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
        break;
 80039da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	d91e      	bls.n	8003a20 <UART_SetConfig+0x374>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <UART_SetConfig+0x36c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d81a      	bhi.n	8003a20 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	e019      	b.n	8003a28 <UART_SetConfig+0x37c>
 80039f4:	efff69f3 	.word	0xefff69f3
 80039f8:	ffffcfff 	.word	0xffffcfff
 80039fc:	fffff4ff 	.word	0xfffff4ff
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40004c00 	.word	0x40004c00
 8003a14:	00f42400 	.word	0x00f42400
 8003a18:	0000ffff 	.word	0x0000ffff
 8003a1c:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8003a20:	2317      	movs	r3, #23
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a34:	2317      	movs	r3, #23
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	781b      	ldrb	r3, [r3, #0]
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b008      	add	sp, #32
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)

08003a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	2201      	movs	r2, #1
 8003a52:	4013      	ands	r3, r2
 8003a54:	d00b      	beq.n	8003a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a4a      	ldr	r2, [pc, #296]	; (8003b88 <UART_AdvFeatureConfig+0x144>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2202      	movs	r2, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a43      	ldr	r2, [pc, #268]	; (8003b8c <UART_AdvFeatureConfig+0x148>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2204      	movs	r2, #4
 8003a96:	4013      	ands	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a3b      	ldr	r2, [pc, #236]	; (8003b90 <UART_AdvFeatureConfig+0x14c>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a34      	ldr	r2, [pc, #208]	; (8003b94 <UART_AdvFeatureConfig+0x150>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2210      	movs	r2, #16
 8003ada:	4013      	ands	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <UART_AdvFeatureConfig+0x154>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2220      	movs	r2, #32
 8003afc:	4013      	ands	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <UART_AdvFeatureConfig+0x158>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2240      	movs	r2, #64	; 0x40
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <UART_AdvFeatureConfig+0x15c>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	035b      	lsls	r3, r3, #13
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d10b      	bne.n	8003b5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <UART_AdvFeatureConfig+0x160>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	0019      	movs	r1, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	4013      	ands	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <UART_AdvFeatureConfig+0x164>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	0019      	movs	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
  }
}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	fffdffff 	.word	0xfffdffff
 8003b8c:	fffeffff 	.word	0xfffeffff
 8003b90:	fffbffff 	.word	0xfffbffff
 8003b94:	ffff7fff 	.word	0xffff7fff
 8003b98:	ffffefff 	.word	0xffffefff
 8003b9c:	ffffdfff 	.word	0xffffdfff
 8003ba0:	ffefffff 	.word	0xffefffff
 8003ba4:	ff9fffff 	.word	0xff9fffff
 8003ba8:	fff7ffff 	.word	0xfff7ffff

08003bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003bba:	f7fd fbb7 	bl	800132c <HAL_GetTick>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d10d      	bne.n	8003bec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	0399      	lsls	r1, r3, #14
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <UART_CheckIdleState+0x88>)
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	0013      	movs	r3, r2
 8003bde:	2200      	movs	r2, #0
 8003be0:	f000 f82a 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d001      	beq.n	8003bec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e01f      	b.n	8003c2c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d10d      	bne.n	8003c16 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	03d9      	lsls	r1, r3, #15
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <UART_CheckIdleState+0x88>)
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	0013      	movs	r3, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f000 f815 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d001      	beq.n	8003c16 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e00a      	b.n	8003c2c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2270      	movs	r2, #112	; 0x70
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b004      	add	sp, #16
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	01ffffff 	.word	0x01ffffff

08003c38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c48:	e05d      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	d05a      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c50:	f7fd fb6c 	bl	800132c <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d302      	bcc.n	8003c66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d11b      	bne.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	492f      	ldr	r1, [pc, #188]	; (8003d30 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c72:	400a      	ands	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2101      	movs	r1, #1
 8003c82:	438a      	bics	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2270      	movs	r2, #112	; 0x70
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e043      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d02d      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d123      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4917      	ldr	r1, [pc, #92]	; (8003d30 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	438a      	bics	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2270      	movs	r2, #112	; 0x70
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	425a      	negs	r2, r3
 8003d16:	4153      	adcs	r3, r2
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d092      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	fffffe5f 	.word	0xfffffe5f

08003d34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d3c:	210e      	movs	r1, #14
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <USB_EnableGlobalInt+0x30>)
 8003d42:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2240      	movs	r2, #64	; 0x40
 8003d48:	5a9b      	ldrh	r3, [r3, r2]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	b299      	uxth	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2240      	movs	r2, #64	; 0x40
 8003d58:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	ffffbf80 	.word	0xffffbf80

08003d68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d70:	210e      	movs	r1, #14
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <USB_DisableGlobalInt+0x3c>)
 8003d76:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2240      	movs	r2, #64	; 0x40
 8003d7c:	5a9b      	ldrh	r3, [r3, r2]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	b21b      	sxth	r3, r3
 8003d82:	187a      	adds	r2, r7, r1
 8003d84:	2100      	movs	r1, #0
 8003d86:	5e52      	ldrsh	r2, [r2, r1]
 8003d88:	43d2      	mvns	r2, r2
 8003d8a:	b212      	sxth	r2, r2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b21b      	sxth	r3, r3
 8003d90:	b299      	uxth	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2240      	movs	r2, #64	; 0x40
 8003d96:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	ffffbf80 	.word	0xffffbf80

08003da8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003da8:	b084      	sub	sp, #16
 8003daa:	b590      	push	{r4, r7, lr}
 8003dac:	46c6      	mov	lr, r8
 8003dae:	b500      	push	{lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	2004      	movs	r0, #4
 8003db8:	2410      	movs	r4, #16
 8003dba:	46a4      	mov	ip, r4
 8003dbc:	2408      	movs	r4, #8
 8003dbe:	46a0      	mov	r8, r4
 8003dc0:	44b8      	add	r8, r7
 8003dc2:	44c4      	add	ip, r8
 8003dc4:	4460      	add	r0, ip
 8003dc6:	6001      	str	r1, [r0, #0]
 8003dc8:	6042      	str	r2, [r0, #4]
 8003dca:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2240      	movs	r2, #64	; 0x40
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2240      	movs	r2, #64	; 0x40
 8003dd8:	2100      	movs	r1, #0
 8003dda:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2244      	movs	r2, #68	; 0x44
 8003de0:	2100      	movs	r1, #0
 8003de2:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2250      	movs	r2, #80	; 0x50
 8003de8:	2100      	movs	r1, #0
 8003dea:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7ff ffa0 	bl	8003d34 <USB_EnableGlobalInt>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b002      	add	sp, #8
 8003dfc:	bc04      	pop	{r2}
 8003dfe:	4690      	mov	r8, r2
 8003e00:	bc90      	pop	{r4, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	b004      	add	sp, #16
 8003e06:	4718      	bx	r3

08003e08 <_ZdlPvj>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	f000 f801 	bl	8003e10 <_ZdlPv>
 8003e0e:	bd10      	pop	{r4, pc}

08003e10 <_ZdlPv>:
 8003e10:	b510      	push	{r4, lr}
 8003e12:	f000 f835 	bl	8003e80 <free>
 8003e16:	bd10      	pop	{r4, pc}

08003e18 <__errno>:
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <__errno+0x8>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4770      	bx	lr
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	2000000c 	.word	0x2000000c

08003e24 <__libc_init_array>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	2600      	movs	r6, #0
 8003e28:	4d0c      	ldr	r5, [pc, #48]	; (8003e5c <__libc_init_array+0x38>)
 8003e2a:	4c0d      	ldr	r4, [pc, #52]	; (8003e60 <__libc_init_array+0x3c>)
 8003e2c:	1b64      	subs	r4, r4, r5
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	42a6      	cmp	r6, r4
 8003e32:	d109      	bne.n	8003e48 <__libc_init_array+0x24>
 8003e34:	2600      	movs	r6, #0
 8003e36:	f000 f923 	bl	8004080 <_init>
 8003e3a:	4d0a      	ldr	r5, [pc, #40]	; (8003e64 <__libc_init_array+0x40>)
 8003e3c:	4c0a      	ldr	r4, [pc, #40]	; (8003e68 <__libc_init_array+0x44>)
 8003e3e:	1b64      	subs	r4, r4, r5
 8003e40:	10a4      	asrs	r4, r4, #2
 8003e42:	42a6      	cmp	r6, r4
 8003e44:	d105      	bne.n	8003e52 <__libc_init_array+0x2e>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	00b3      	lsls	r3, r6, #2
 8003e4a:	58eb      	ldr	r3, [r5, r3]
 8003e4c:	4798      	blx	r3
 8003e4e:	3601      	adds	r6, #1
 8003e50:	e7ee      	b.n	8003e30 <__libc_init_array+0xc>
 8003e52:	00b3      	lsls	r3, r6, #2
 8003e54:	58eb      	ldr	r3, [r5, r3]
 8003e56:	4798      	blx	r3
 8003e58:	3601      	adds	r6, #1
 8003e5a:	e7f2      	b.n	8003e42 <__libc_init_array+0x1e>
 8003e5c:	080040e0 	.word	0x080040e0
 8003e60:	080040e0 	.word	0x080040e0
 8003e64:	080040e0 	.word	0x080040e0
 8003e68:	080040e8 	.word	0x080040e8

08003e6c <malloc>:
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <malloc+0x10>)
 8003e70:	0001      	movs	r1, r0
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	f000 f860 	bl	8003f38 <_malloc_r>
 8003e78:	bd10      	pop	{r4, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	2000000c 	.word	0x2000000c

08003e80 <free>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <free+0x10>)
 8003e84:	0001      	movs	r1, r0
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	f000 f80c 	bl	8003ea4 <_free_r>
 8003e8c:	bd10      	pop	{r4, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	2000000c 	.word	0x2000000c

08003e94 <memset>:
 8003e94:	0003      	movs	r3, r0
 8003e96:	1812      	adds	r2, r2, r0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	7019      	strb	r1, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <_free_r>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	0005      	movs	r5, r0
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	d010      	beq.n	8003ece <_free_r+0x2a>
 8003eac:	1f0c      	subs	r4, r1, #4
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	da00      	bge.n	8003eb6 <_free_r+0x12>
 8003eb4:	18e4      	adds	r4, r4, r3
 8003eb6:	0028      	movs	r0, r5
 8003eb8:	f000 f8e0 	bl	800407c <__malloc_lock>
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <_free_r+0x90>)
 8003ebe:	6813      	ldr	r3, [r2, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <_free_r+0x2c>
 8003ec4:	6063      	str	r3, [r4, #4]
 8003ec6:	6014      	str	r4, [r2, #0]
 8003ec8:	0028      	movs	r0, r5
 8003eca:	f000 f8d8 	bl	800407e <__malloc_unlock>
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	d909      	bls.n	8003ee8 <_free_r+0x44>
 8003ed4:	6821      	ldr	r1, [r4, #0]
 8003ed6:	1860      	adds	r0, r4, r1
 8003ed8:	4283      	cmp	r3, r0
 8003eda:	d1f3      	bne.n	8003ec4 <_free_r+0x20>
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	1841      	adds	r1, r0, r1
 8003ee2:	6021      	str	r1, [r4, #0]
 8003ee4:	e7ee      	b.n	8003ec4 <_free_r+0x20>
 8003ee6:	0013      	movs	r3, r2
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	2a00      	cmp	r2, #0
 8003eec:	d001      	beq.n	8003ef2 <_free_r+0x4e>
 8003eee:	42a2      	cmp	r2, r4
 8003ef0:	d9f9      	bls.n	8003ee6 <_free_r+0x42>
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	1858      	adds	r0, r3, r1
 8003ef6:	42a0      	cmp	r0, r4
 8003ef8:	d10b      	bne.n	8003f12 <_free_r+0x6e>
 8003efa:	6820      	ldr	r0, [r4, #0]
 8003efc:	1809      	adds	r1, r1, r0
 8003efe:	1858      	adds	r0, r3, r1
 8003f00:	6019      	str	r1, [r3, #0]
 8003f02:	4282      	cmp	r2, r0
 8003f04:	d1e0      	bne.n	8003ec8 <_free_r+0x24>
 8003f06:	6810      	ldr	r0, [r2, #0]
 8003f08:	6852      	ldr	r2, [r2, #4]
 8003f0a:	1841      	adds	r1, r0, r1
 8003f0c:	6019      	str	r1, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	e7da      	b.n	8003ec8 <_free_r+0x24>
 8003f12:	42a0      	cmp	r0, r4
 8003f14:	d902      	bls.n	8003f1c <_free_r+0x78>
 8003f16:	230c      	movs	r3, #12
 8003f18:	602b      	str	r3, [r5, #0]
 8003f1a:	e7d5      	b.n	8003ec8 <_free_r+0x24>
 8003f1c:	6821      	ldr	r1, [r4, #0]
 8003f1e:	1860      	adds	r0, r4, r1
 8003f20:	4282      	cmp	r2, r0
 8003f22:	d103      	bne.n	8003f2c <_free_r+0x88>
 8003f24:	6810      	ldr	r0, [r2, #0]
 8003f26:	6852      	ldr	r2, [r2, #4]
 8003f28:	1841      	adds	r1, r0, r1
 8003f2a:	6021      	str	r1, [r4, #0]
 8003f2c:	6062      	str	r2, [r4, #4]
 8003f2e:	605c      	str	r4, [r3, #4]
 8003f30:	e7ca      	b.n	8003ec8 <_free_r+0x24>
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	20000438 	.word	0x20000438

08003f38 <_malloc_r>:
 8003f38:	2303      	movs	r3, #3
 8003f3a:	b570      	push	{r4, r5, r6, lr}
 8003f3c:	1ccd      	adds	r5, r1, #3
 8003f3e:	439d      	bics	r5, r3
 8003f40:	3508      	adds	r5, #8
 8003f42:	0006      	movs	r6, r0
 8003f44:	2d0c      	cmp	r5, #12
 8003f46:	d21e      	bcs.n	8003f86 <_malloc_r+0x4e>
 8003f48:	250c      	movs	r5, #12
 8003f4a:	42a9      	cmp	r1, r5
 8003f4c:	d81d      	bhi.n	8003f8a <_malloc_r+0x52>
 8003f4e:	0030      	movs	r0, r6
 8003f50:	f000 f894 	bl	800407c <__malloc_lock>
 8003f54:	4a25      	ldr	r2, [pc, #148]	; (8003fec <_malloc_r+0xb4>)
 8003f56:	6814      	ldr	r4, [r2, #0]
 8003f58:	0021      	movs	r1, r4
 8003f5a:	2900      	cmp	r1, #0
 8003f5c:	d119      	bne.n	8003f92 <_malloc_r+0x5a>
 8003f5e:	4c24      	ldr	r4, [pc, #144]	; (8003ff0 <_malloc_r+0xb8>)
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <_malloc_r+0x36>
 8003f66:	0030      	movs	r0, r6
 8003f68:	f000 f876 	bl	8004058 <_sbrk_r>
 8003f6c:	6020      	str	r0, [r4, #0]
 8003f6e:	0029      	movs	r1, r5
 8003f70:	0030      	movs	r0, r6
 8003f72:	f000 f871 	bl	8004058 <_sbrk_r>
 8003f76:	1c43      	adds	r3, r0, #1
 8003f78:	d12b      	bne.n	8003fd2 <_malloc_r+0x9a>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	0030      	movs	r0, r6
 8003f7e:	6033      	str	r3, [r6, #0]
 8003f80:	f000 f87d 	bl	800407e <__malloc_unlock>
 8003f84:	e003      	b.n	8003f8e <_malloc_r+0x56>
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	dadf      	bge.n	8003f4a <_malloc_r+0x12>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	2000      	movs	r0, #0
 8003f90:	bd70      	pop	{r4, r5, r6, pc}
 8003f92:	680b      	ldr	r3, [r1, #0]
 8003f94:	1b5b      	subs	r3, r3, r5
 8003f96:	d419      	bmi.n	8003fcc <_malloc_r+0x94>
 8003f98:	2b0b      	cmp	r3, #11
 8003f9a:	d903      	bls.n	8003fa4 <_malloc_r+0x6c>
 8003f9c:	600b      	str	r3, [r1, #0]
 8003f9e:	18cc      	adds	r4, r1, r3
 8003fa0:	6025      	str	r5, [r4, #0]
 8003fa2:	e003      	b.n	8003fac <_malloc_r+0x74>
 8003fa4:	684b      	ldr	r3, [r1, #4]
 8003fa6:	428c      	cmp	r4, r1
 8003fa8:	d10d      	bne.n	8003fc6 <_malloc_r+0x8e>
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	0030      	movs	r0, r6
 8003fae:	f000 f866 	bl	800407e <__malloc_unlock>
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	2207      	movs	r2, #7
 8003fb6:	300b      	adds	r0, #11
 8003fb8:	1d23      	adds	r3, r4, #4
 8003fba:	4390      	bics	r0, r2
 8003fbc:	1ac3      	subs	r3, r0, r3
 8003fbe:	d0e7      	beq.n	8003f90 <_malloc_r+0x58>
 8003fc0:	425a      	negs	r2, r3
 8003fc2:	50e2      	str	r2, [r4, r3]
 8003fc4:	e7e4      	b.n	8003f90 <_malloc_r+0x58>
 8003fc6:	6063      	str	r3, [r4, #4]
 8003fc8:	000c      	movs	r4, r1
 8003fca:	e7ef      	b.n	8003fac <_malloc_r+0x74>
 8003fcc:	000c      	movs	r4, r1
 8003fce:	6849      	ldr	r1, [r1, #4]
 8003fd0:	e7c3      	b.n	8003f5a <_malloc_r+0x22>
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	1cc4      	adds	r4, r0, #3
 8003fd6:	439c      	bics	r4, r3
 8003fd8:	42a0      	cmp	r0, r4
 8003fda:	d0e1      	beq.n	8003fa0 <_malloc_r+0x68>
 8003fdc:	1a21      	subs	r1, r4, r0
 8003fde:	0030      	movs	r0, r6
 8003fe0:	f000 f83a 	bl	8004058 <_sbrk_r>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d1db      	bne.n	8003fa0 <_malloc_r+0x68>
 8003fe8:	e7c7      	b.n	8003f7a <_malloc_r+0x42>
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	20000438 	.word	0x20000438
 8003ff0:	2000043c 	.word	0x2000043c

08003ff4 <rand>:
 8003ff4:	4b12      	ldr	r3, [pc, #72]	; (8004040 <rand+0x4c>)
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	681c      	ldr	r4, [r3, #0]
 8003ffa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10f      	bne.n	8004020 <rand+0x2c>
 8004000:	2018      	movs	r0, #24
 8004002:	f7ff ff33 	bl	8003e6c <malloc>
 8004006:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <rand+0x50>)
 8004008:	63a0      	str	r0, [r4, #56]	; 0x38
 800400a:	6003      	str	r3, [r0, #0]
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <rand+0x54>)
 800400e:	2201      	movs	r2, #1
 8004010:	6043      	str	r3, [r0, #4]
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <rand+0x58>)
 8004014:	6083      	str	r3, [r0, #8]
 8004016:	230b      	movs	r3, #11
 8004018:	8183      	strh	r3, [r0, #12]
 800401a:	2300      	movs	r3, #0
 800401c:	6102      	str	r2, [r0, #16]
 800401e:	6143      	str	r3, [r0, #20]
 8004020:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004022:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <rand+0x5c>)
 8004024:	6920      	ldr	r0, [r4, #16]
 8004026:	6961      	ldr	r1, [r4, #20]
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <rand+0x60>)
 800402a:	f7fc f9e3 	bl	80003f4 <__aeabi_lmul>
 800402e:	2201      	movs	r2, #1
 8004030:	2300      	movs	r3, #0
 8004032:	1880      	adds	r0, r0, r2
 8004034:	4159      	adcs	r1, r3
 8004036:	6120      	str	r0, [r4, #16]
 8004038:	6161      	str	r1, [r4, #20]
 800403a:	0048      	lsls	r0, r1, #1
 800403c:	0840      	lsrs	r0, r0, #1
 800403e:	bd10      	pop	{r4, pc}
 8004040:	2000000c 	.word	0x2000000c
 8004044:	abcd330e 	.word	0xabcd330e
 8004048:	e66d1234 	.word	0xe66d1234
 800404c:	0005deec 	.word	0x0005deec
 8004050:	4c957f2d 	.word	0x4c957f2d
 8004054:	5851f42d 	.word	0x5851f42d

08004058 <_sbrk_r>:
 8004058:	2300      	movs	r3, #0
 800405a:	b570      	push	{r4, r5, r6, lr}
 800405c:	4c06      	ldr	r4, [pc, #24]	; (8004078 <_sbrk_r+0x20>)
 800405e:	0005      	movs	r5, r0
 8004060:	0008      	movs	r0, r1
 8004062:	6023      	str	r3, [r4, #0]
 8004064:	f7fd f8ac 	bl	80011c0 <_sbrk>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d103      	bne.n	8004074 <_sbrk_r+0x1c>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d000      	beq.n	8004074 <_sbrk_r+0x1c>
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	bd70      	pop	{r4, r5, r6, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	20000444 	.word	0x20000444

0800407c <__malloc_lock>:
 800407c:	4770      	bx	lr

0800407e <__malloc_unlock>:
 800407e:	4770      	bx	lr

08004080 <_init>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

0800408c <_fini>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr
